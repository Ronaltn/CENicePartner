<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.IO</name>
    </assembly>
    <members>
        <member name="T:InTheHand.IO.FileInTheHand">
            <summary>
            Provides helper methods for the <see cref="T:System.IO.File"/> class.
            </summary>
            <remarks>For Windows Phone 7 all file paths are relative to the application package and only read-only operations are supported.
            Use the isostore: prefix to denote a file in isolated storage which supports readand write operations.</remarks>
            <seealso cref="T:System.IO.File"/>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.GetContentType(System.String)">
            <summary>
            Returns the MIME content type for a specific file name.
            </summary>
            <param name="filename">Full path to a file.</param>
            <returns></returns>
            <remarks>Does not interrogate file contents, the file extension is used to match the content type.</remarks>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.Beam(System.String)">
            <summary>
            Beam a file through the standard OBEX Push mechanism using IrDA or Bluetooth.
            </summary>
            <param name="path">The full path of the file to send.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 5.0 and later</description></item>
            </list></remarks>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends lines to a file, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to.
            The file is created if it does not already exist.</param>
            <param name="contents">The lines to append to the file.</param>
            <exception cref="T:System.ArgumentException">path is a zero-length string.</exception>
            <exception cref="T:System.ArgumentNullException">Either path or contents is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Appends lines to a file by using a specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to append the lines to.</param>
            <param name="contents">The lines to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException">path is a zero-length string.</exception>
            <exception cref="T:System.ArgumentNullException">Either path or contents is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.AppendAllText(System.String,System.String)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <exception cref="T:System.ArgumentNullException">Either path or contents is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException">Either path or contents is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string array containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string array containing all lines of the file.</returns>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all of the file.</returns>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a file, reads all lines of the file with the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <param name="encoding">The encoding applied to the contents of the file.</param>
            <returns>A string containing all of the file.</returns>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. 
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or the byte array is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string array to the file using the default encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding"/> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="M:InTheHand.IO.FileInTheHand.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string to write to the file.</param>
            <param name="encoding">An Encoding object that represents the encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentNullException">path is a null reference (Nothing in Visual Basic) or contents string is empty.</exception>
        </member>
        <member name="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException">
            <summary>
            The exception that is thrown when an operation in isolated storage fails.
            </summary>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException"/> class with default properties.
            </summary>
        </member>
        <member name="T:InTheHand.IO.DriveInfo">
             <summary>
             Provides access to information on a drive.
             </summary>
             <remarks><para>Equivalent to System.IO.DriveInfo</para>This class models a drive and provides methods and properties to query for drive information.
             Use <see cref="T:InTheHand.IO.DriveInfo"/> to determine what drives are available, and the capacity and available free space on the drive.</remarks>
             <example>The following code example demonstrates the use of the DriveInfo class to display information about all of the drives on the current system
             <code lang="vbnet">
             Imports System
             Imports System.IO
             
             Class Test
                 Public Shared Sub Main()
                     Dim allDrives() As DriveInfo = DriveInfo.GetDrives()
                     
                     Dim d As DriveInfo
                     For Each d In allDrives
                     Debug.WriteLine("Drive {0}", d.Name)
                     Debug.WriteLine("  Available space to current user:{0, 15} bytes", _
                         d.AvailableFreeSpace)
            
                     Debug.WriteLine("  Total available space:          {0, 15} bytes", _
                         d.TotalFreeSpace)
            
                     Debug.WriteLine("  Total size of drive:            {0, 15} bytes ", _
                         d.TotalSize)
                     Next
                 End Sub
             End Class
             
             'This code produces output similar to the following:
             '
             'Drive \
             '  Available space to current user:     4770430976 bytes
             '  Total available space:               4770430976 bytes
             '  Total size of drive:                10731683840 bytes 
             'Drive \Storage Card
             '  Available space to current user:    15114977280 bytes
             '  Total available space:              15114977280 bytes
             '  Total size of drive:                25958948864 bytes 
             '
             'The actual output of this code will vary based on machine and the permissions
             'granted to the user executing it.
             </code></example>
        </member>
        <member name="M:InTheHand.IO.DriveInfo.#ctor(System.String)">
            <summary>
            Provides access to information on the specified drive.
            </summary>
            <param name="driveName"></param>
            <remarks>Use this class to obtain information on drives.
            The drive name must be a valid Windows CE volume path e.g. "\Storage Card".
            You cannot use this method to obtain information on drive names that are a null reference (Nothing in Visual Basic) or use UNC (\\server\share) paths.</remarks>
            <exception cref="T:System.ArgumentNullException">The drive name cannot be a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">driveName does not refer to a valid drive.</exception>
        </member>
        <member name="M:InTheHand.IO.DriveInfo.ToString">
            <summary>
            Returns a drive name as a string.
            </summary>
            <returns>The name of the drive.</returns>
        </member>
        <member name="M:InTheHand.IO.DriveInfo.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a device.
            </summary>
            <returns>An array of type <see cref="T:InTheHand.IO.DriveInfo"/> that represents the logical drives on a device.</returns>
            <remarks>This method retrieves all logical drive names on a computer. 
            You can use this information to iterate through the array and obtain information on the drives using other <see cref="T:InTheHand.IO.DriveInfo"/> methods and properties.</remarks>
        </member>
        <member name="P:InTheHand.IO.DriveInfo.RootDirectory">
            <summary>
            Gets the root directory of a drive.
            </summary>
            <value>A <see cref="T:System.IO.DirectoryInfo"/> object that contains the root directory of the drive.</value>
        </member>
        <member name="P:InTheHand.IO.DriveInfo.AvailableFreeSpace">
            <summary>
            Indicates the amount of available free space on a drive.
            </summary>
            <value>The amount of free space available on the drive, in bytes.</value>
        </member>
        <member name="P:InTheHand.IO.DriveInfo.TotalFreeSpace">
            <summary>
            Gets the total amount of free space available on a drive.
            </summary>
            <value>The total free space available on a drive, in bytes.</value>
        </member>
        <member name="P:InTheHand.IO.DriveInfo.TotalSize">
            <summary>
            Gets the total size of storage space on a drive.
            </summary>
            <value>The total size of the drive, in bytes.</value>
        </member>
        <member name="T:InTheHand.IO.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.Argument_EmptyPath">
            <summary>
              Looks up a localized string similar to Empty path name is not legal..
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.InvalidDirName">
            <summary>
              Looks up a localized string similar to The directory name {0} is invalid..
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.IO_PathNotFound_Path">
            <summary>
              Looks up a localized string similar to Could not find a part of the path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.IsolatedStorage_Operation">
            <summary>
              Looks up a localized string similar to Operation not permitted..
            </summary>
        </member>
        <member name="P:InTheHand.IO.Properties.Resources.IsolatedStorage_StoreNotOpen">
            <summary>
              Looks up a localized string similar to Store must be open for this operation..
            </summary>
        </member>
        <member name="T:InTheHand.IO.FileSystemWatcher">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
            <remarks><para>Use FileSystemWatcher to watch for changes in a specified directory.
            You can watch for changes in files and subdirectories of the specified directory.
            You can create a component to watch files on a local computer, a network drive, or a remote computer.</para>
            <para>To watch for changes in all files, set the <see cref="P:InTheHand.IO.FileSystemWatcher.Filter"/> property to an empty string ("") or use wildcards ("*.*").
            To watch a specific file, set the Filter property to the file name.
            For example, to watch for changes in the file MyDoc.txt, set the <see cref="P:InTheHand.IO.FileSystemWatcher.Filter"/> property to "MyDoc.txt".
            You can also watch for changes in a certain type of file.
            For example, to watch for changes in text files, set the <see cref="P:InTheHand.IO.FileSystemWatcher.Filter"/> property to "*.txt".</para>
            <para>There are several types of changes you can watch for in a directory or file.
            For example, you can watch for changes in <see cref="F:InTheHand.IO.NotifyFilters.Attributes"/>, the <see cref="F:InTheHand.IO.NotifyFilters.LastWrite"/> date and time, or the <see cref="F:InTheHand.IO.NotifyFilters.Size"/> of files or directories.
            This is done by setting the <see cref="P:InTheHand.IO.FileSystemWatcher.NotifyFilter"/> property to one of the <see cref="T:InTheHand.IO.NotifyFilters"/> values.
            For more information on the type of changes you can watch, see <see cref="T:InTheHand.IO.NotifyFilters"/>.</para>
            <para>You can watch for renaming, deletion, or creation of files or directories.
            For example, to watch for renaming of text files, set the Filter property to "*.txt" and handle the Renamed event.</para>
            For a list of initial property values for an instance of FileSystemWatcher, see the FileSystemWatcher constructor.
            Please note that Hidden files are not ignored.
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 2003 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows Embedded Compact 4.2 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.IO.FileSystemWatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.FileSystemWatcher"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.IO.FileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.FileSystemWatcher"/> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:InTheHand.IO.FileSystemWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.FileSystemWatcher"/> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch.
            For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:InTheHand.IO.FileSystemWatcher.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:InTheHand.IO.FileSystemWatcher"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:InTheHand.IO.FileSystemWatcher.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:InTheHand.IO.FileSystemWatcher"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:InTheHand.IO.FileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> is created.
            </summary>
        </member>
        <member name="E:InTheHand.IO.FileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> is changed.
            </summary>
        </member>
        <member name="E:InTheHand.IO.FileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:InTheHand.IO.FileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:InTheHand.IO.FileSystemWatcher.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
            <value>true if the component is enabled; otherwise, false.
            The default is false.</value>
        </member>
        <member name="P:InTheHand.IO.FileSystemWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
            <value>true if you want to monitor subdirectories; otherwise, false.
            The default is false.</value>
            <remarks>Set IncludeSubdirectories to true when you want to watch for change notifications for files and directories contained within the directory specified through the Path property, and its subdirectories.
            Setting the IncludeSubdirectories property to false helps reduce the number of notifications.</remarks>
        </member>
        <member name="P:InTheHand.IO.FileSystemWatcher.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
            <value>One of the NotifyFilters values.
            The default is the bitwise OR combination of <see cref="F:InTheHand.IO.NotifyFilters.LastWrite"/>, <see cref="F:InTheHand.IO.NotifyFilters.FileName"/>, and <see cref="F:InTheHand.IO.NotifyFilters.DirectoryName"/>.</value>
            <remarks>You can combine the members of the <see cref="T:InTheHand.IO.NotifyFilters"/> enumeration to watch for more than one type of change at a time.
            For example, you can watch for changes in size of a file, and for changes in the LastWrite time.
            This raises an event anytime there is a change in file or folder size, or a change in the LastWrite time of the file or folder.</remarks>
        </member>
        <member name="P:InTheHand.IO.FileSystemWatcher.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
            <value>The path to monitor.
            The default is an empty string ("").</value>
        </member>
        <member name="P:InTheHand.IO.FileSystemWatcher.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:InTheHand.IO.FileSystemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.IO.FileSystemWatcher.Changed"/>, <see cref="E:InTheHand.IO.FileSystemWatcher.Created"/>, or <see cref="E:InTheHand.IO.FileSystemWatcher.Deleted"/> event of a <see cref="T:InTheHand.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:InTheHand.IO.FileSystemEventArgs"/> that contains the event data.</param>
            <seealso cref="T:InTheHand.IO.FileSystemEventArgs"/>
            <seealso cref="T:InTheHand.IO.RenamedEventArgs"/>
        </member>
        <member name="T:InTheHand.IO.RenamedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.IO.FileSystemWatcher.Renamed"/> event of a <see cref="T:InTheHand.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:InTheHand.IO.RenamedEventArgs"/> that contains the event data.</param>
            <seealso cref="T:InTheHand.IO.RenamedEventArgs"/>
            <seealso cref="T:InTheHand.IO.FileSystemEventHandler"/>
            <seealso cref="T:InTheHand.IO.FileSystemEventArgs"/>
        </member>
        <member name="T:InTheHand.IO.WatcherChangeTypes">
            <summary>
            Changes that might occur to a file or directory.
            </summary>
            <remarks>Each <see cref="T:InTheHand.IO.WatcherChangeTypes"/> member is associated with an event in <see cref="T:InTheHand.IO.FileSystemWatcher"/>.
            For more information on the events, see <see cref="E:InTheHand.IO.FileSystemWatcher.Changed"/>, <see cref="E:InTheHand.IO.FileSystemWatcher.Created"/>, <see cref="E:InTheHand.IO.FileSystemWatcher.Deleted"/> and <see cref="E:InTheHand.IO.FileSystemWatcher.Renamed"/>.</remarks>
        </member>
        <member name="F:InTheHand.IO.WatcherChangeTypes.Created">
            <summary>
            The creation of a file or folder.
            </summary>
        </member>
        <member name="F:InTheHand.IO.WatcherChangeTypes.Deleted">
            <summary>
            The deletion of a file or folder.
            </summary>
        </member>
        <member name="F:InTheHand.IO.WatcherChangeTypes.Changed">
            <summary>
            The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.
            </summary>
        </member>
        <member name="F:InTheHand.IO.WatcherChangeTypes.Renamed">
            <summary>
            The renaming of a file or folder.
            </summary>
        </member>
        <member name="F:InTheHand.IO.WatcherChangeTypes.All">
            <summary>
            The creation, deletion, change, or renaming of a file or folder. 
            </summary>
        </member>
        <member name="T:InTheHand.IO.NotifyFilters">
            <summary>
            Specifies changes to watch for in a file or folder.
            </summary>
            <remarks>You can combine the members of this enumeration to watch for more than one kind of change. For example, you can watch for changes in the size of a file or folder, and for changes in security settings. This raises an event anytime there is a change in size or security settings of a file or folder.</remarks>
            <seealso cref="T:InTheHand.IO.FileSystemWatcher"/>
            <seealso cref="T:InTheHand.IO.FileSystemEventArgs"/>
            <seealso cref="T:InTheHand.IO.FileSystemEventHandler"/>
            <seealso cref="T:InTheHand.IO.RenamedEventArgs"/>
            <seealso cref="T:InTheHand.IO.RenamedEventHandler"/>
            <seealso cref="T:InTheHand.IO.WatcherChangeTypes"/>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.DirectoryName">
            <summary>
            The name of the directory.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.Attributes">
            <summary>
            The attributes of the file or folder.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.Size">
            <summary>
            The size of the file or folder.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.LastWrite">
            <summary>
            The date the file or folder last had anything written to it.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.LastAccess">
            <summary>
            The date the file or folder was last opened.
            </summary>
        </member>
        <member name="F:InTheHand.IO.NotifyFilters.CreationTime">
            <summary>
            The time the file or folder was created.
            </summary>
        </member>
        <member name="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream">
            <summary>
            Exposes a file within isolated storage.
            </summary>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,InTheHand.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/> class giving access to the file designated by path, in the specified mode, and in the context of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> specified by isf.
            </summary>
            <param name="path">The relative path of the file within isolated storage.</param>
            <param name="mode">One of the <see cref="T:System.IO.FileMode"/> values.</param>
            <param name="isf">The <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,InTheHand.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/> class giving access to the file designated by path in the specified mode, with the specified file access, and in the context of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> specified by isf.
            </summary>
            <param name="path">The relative path of the file within isolated storage.</param>
            <param name="mode">One of the <see cref="T:System.IO.FileMode"/> values.</param>
            <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"/> values.</param>
            <param name="isf">The <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,InTheHand.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/> class giving access to the file designated by path, 
            in the specified mode, with the specified file access, using the file sharing mode specified by share, 
            and in the context of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> specified by isf.
            </summary>
            <param name="path">The relative path of the file within isolated storage.</param>
            <param name="mode">One of the <see cref="T:System.IO.FileMode"/> values.</param>
            <param name="access">A bitwise combination of the <see cref="T:System.IO.FileAccess"/> values.</param>
            <param name="share">A bitwise combination of the <see cref="T:System.IO.FileShare"/> values.</param>
            <param name="isf">The <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/> in which to open the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/>.</param>
        </member>
        <member name="P:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream.Name">
            <summary>
            Gets the name of the file that was used to create the instance of the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/>.
            </summary>
        </member>
        <member name="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile">
            <summary>
            Represents an isolated storage area containing files and directories.
            </summary>
            <remarks>This object corresponds to a specific isolated storage scope, where files represented by IsolatedStorageFileStream objects exist.
            Applications can use isolated storage to save data in their own isolated portion of the file system, without having to specify a particular path within the file system.</remarks>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication">
            <summary>
            Obtains user-scoped isolated storage for use by an application that calls from the virtual host domain.
            </summary>
            <returns>The isolated storage file that corresponds to the isolated storage scope based on the identity of an application in a virtual host domain.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. 
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <exception cref="T:System.ArgumentException">sourceFileName or destinationFileName is a zero-length string, contains only white space, or contains one or more invalid characters defined by the Path.GetInvalidPathChars method.</exception>
            <exception cref="T:System.ArgumentNullException">sourceFileName or destinationFileName is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
            <exception cref="T:System.IO.FileNotFoundException">sourceFileName was not found.</exception>
            <exception cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException">An I/O error has occurred.</exception>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, and optionally overwrites an existing file.
            </summary>
            <param name="sourceFileName">The name of the file to copy.</param>
            <param name="destinationFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
            <exception cref="T:System.ArgumentException">sourceFileName or destinationFileName is a zero-length string, contains only white space, or contains one or more invalid characters defined by the Path.GetInvalidPathChars method.</exception>
            <exception cref="T:System.ArgumentNullException">sourceFileName or destinationFileName is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
            <exception cref="T:System.IO.FileNotFoundException">sourceFileName was not found.</exception>
            <exception cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageException">An I/O error has occurred.</exception>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
            <summary>
            Creates a directory in the isolated storage scope.
            </summary>
            <param name="dir">The relative path of the directory to create within the isolated storage.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(System.String)">
            <summary>
            Creates a file in the isolated store.
            </summary>
            <param name="path">The relative path of the file to be created in the isolated store.</param>
            <returns>A new isolated storage file.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory in the isolated storage scope.
            </summary>
            <param name="dir">The relative path of the directory to delete within the isolated storage scope.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
            <summary>
            Deletes a file in the isolated store.
            </summary>
            <param name="file">The relative path of the file to delete within the isolated store.</param>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.DirectoryExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing directory in the isolated store.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory in the isolated store and is not null; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.FileExists(System.String)">
            <summary>
            Determines whether the specified path refers to an existing file in the isolated store.
            </summary>
            <param name="path">The path and file name to test.</param>
            <returns>true if path refers to an existing file in the isolated store and is not null; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
            <summary>
            Enumerates directories in an isolated storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern.
            Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>An Array of the relative paths of directories in the isolated storage scope that match searchPattern.
            A zero-length array specifies that there are no directories that match.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames">
            <summary>
            Enumerates the directories in the root of an isolated store.
            </summary>
            <returns>An array of relative paths of directories in the root of the isolated store.
            A zero-length array specifies that there are no directories in the root.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
            <summary>
            Enumerates files in isolated storage scope that match a given pattern.
            </summary>
            <param name="searchPattern">A search pattern.
            Both single-character ("?") and multi-character ("*") wildcards are supported.</param>
            <returns>An Array of relative paths of files in the isolated storage scope that match searchPattern.
            A zero-length array specifies that there are no files that match.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames">
            <summary>
            Obtains the names of files in the root of an isolated store.
            </summary>
            <returns>An array of relative paths of files in the root of the isolated store.
            A zero-length array specifies that there are no files in the root.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="path">The relative path of the file within the isolated store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access"> The type of access to open the file with.</param>
            <param name="share">The type of access other <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFileStream"/> objects have to this file.</param>
            <returns>A file that is opened in the specified mode and access, and with the specified sharing options.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with the specified file access.
            </summary>
            <param name="path">The relative path of the file within the isolated store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <param name="access"> The type of access to open the file with.</param>
            <returns>A file that is opened in the specified mode and access, and is unshared.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="path">The relative path of the file within the isolated store.</param>
            <param name="mode">The mode in which to open the file.</param>
            <returns>A file that is opened in the specified mode, with read/write access, and is unshared.</returns>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.Remove">
            <summary>
            Removes the isolated storage scope and all its contents.
            </summary>
        </member>
        <member name="M:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:InTheHand.IO.IsolatedStorage.IsolatedStorageFile"/>.
            </summary>
        </member>
        <member name="P:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.AvailableFreeSpace">
            <summary>
            Gets a value that represents the amount of free space available for isolated storage.
            </summary>
        </member>
        <member name="P:InTheHand.IO.IsolatedStorage.IsolatedStorageFile.Quota">
            <summary>
            Gets a value that represents the maximum amount of space available for isolated storage.
            </summary>
            <value>The limit of isolated storage space, in bytes.</value>
            <exception cref="T:System.ObjectDisposedException">The isolated store has been disposed.</exception>
        </member>
        <member name="T:InTheHand.IO.RenamedEventArgs">
            <summary>
            Provides data for the Renamed event.
            </summary>
        </member>
        <member name="T:InTheHand.IO.FileSystemEventArgs">
            <summary>
            Provides data for the directory events: <see cref="E:InTheHand.IO.FileSystemWatcher.Changed"/>, <see cref="E:InTheHand.IO.FileSystemWatcher.Created"/>, <see cref="E:InTheHand.IO.FileSystemWatcher.Deleted"/>.
            </summary>
            <remarks>The <b>FileSystemEventArgs</b> class is passed as a parameter to event handlers for these events:
            <para>The <see cref="E:InTheHand.IO.FileSystemWatcher.Changed"/> event occurs when changes are made to the size, system attributes, last write time, last access time, or security permissions in a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> of a <see cref="T:InTheHand.IO.FileSystemWatcher"/>.</para>
            <para>The <see cref="E:InTheHand.IO.FileSystemWatcher.Created"/> event occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> of a <see cref="T:InTheHand.IO.FileSystemWatcher"/> is created.</para>
            <para>The <see cref="E:InTheHand.IO.FileSystemWatcher.Deleted"/> event occurs when a file or directory in the specified <see cref="P:InTheHand.IO.FileSystemWatcher.Path"/> of a <see cref="T:InTheHand.IO.FileSystemWatcher"/> is deleted. For more information, see <see cref="T:InTheHand.IO.FileSystemWatcher"/>.</para></remarks>
        </member>
        <member name="M:InTheHand.IO.FileSystemEventArgs.#ctor(InTheHand.IO.WatcherChangeTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.IO.FileSystemEventArgs"/> class.
            </summary>
            <param name="changeType">One of the <see cref="T:InTheHand.IO.WatcherChangeTypes"/> values, which represents the kind of change detected in the file system.</param>
            <param name="directory">The root directory of the affected file or directory.</param>
            <param name="name">The name of the affected file or directory.</param>
        </member>
        <member name="P:InTheHand.IO.FileSystemEventArgs.ChangeType">
            <summary>
            Gets the type of directory event that occurred.
            </summary>
            <value>One of the <see cref="T:InTheHand.IO.WatcherChangeTypes"/> values that represents the kind of change detected in the file system.</value>
            <seealso cref="T:InTheHand.IO.FileSystemEventArgs"/>
            <seealso cref="T:InTheHand.IO.WatcherChangeTypes"/>
        </member>
        <member name="P:InTheHand.IO.FileSystemEventArgs.FullPath">
            <summary>
            Gets the fully qualifed path of the affected file or directory.
            </summary>
            <value>The path of the affected file or directory.</value>
        </member>
        <member name="P:InTheHand.IO.FileSystemEventArgs.Name">
            <summary>
            Gets the name of the affected file or directory.
            </summary>
            <value>The name of the affected file or directory.</value>
        </member>
        <member name="M:InTheHand.IO.RenamedEventArgs.#ctor(InTheHand.IO.WatcherChangeTypes,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RenamedEventArgs class.
            </summary>
            <param name="changeType">One of the WatcherChangeTypes values.</param>
            <param name="directory">The name of the affected file or directory.</param>
            <param name="name">The name of the affected file or directory.</param>
            <param name="oldName">The old name of the affected file or directory.</param>
        </member>
        <member name="P:InTheHand.IO.RenamedEventArgs.OldFullPath">
            <summary>
            Gets the previous fully qualified path of the affected file or directory.
            </summary>
        </member>
        <member name="P:InTheHand.IO.RenamedEventArgs.OldName">
            <summary>
            Gets the old name of the affected file or directory.
            </summary>
        </member>
    </members>
</doc>
