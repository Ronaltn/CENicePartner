<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Net</name>
    </assembly>
    <members>
        <member name="T:InTheHand.Net.FtpWebRequest">
            <summary>
            Implements a File Transfer Protocol (FTP) client.
            </summary>
            <remarks>
            <para>Equivalent to System.Net.FtpWebRequest</para>
            <para>You must call the static method <see cref="M:InTheHand.Net.FtpWebRequest.RegisterPrefix"/> before this class can be used with <see cref="M:System.Net.WebRequest.Create(System.String)"/>. You only need to call <see cref="M:InTheHand.Net.FtpWebRequest.RegisterPrefix"/> once in your application.</para>
            To obtain an instance of <see cref="T:InTheHand.Net.FtpWebRequest"/>, use the <see cref="M:System.Net.WebRequest.Create(System.String)"/> method after calling <see cref="M:InTheHand.Net.FtpWebRequest.RegisterPrefix"/>.
            You can also use the <see cref="T:InTheHand.Net.WebClient"/> class to upload and download information from an FTP server.
            Using either of these approaches, when you specify a network resource that uses the FTP scheme (for example, "ftp://contoso.com") the <see cref="T:InTheHand.Net.FtpWebRequest"/> class provides the ability to programmatically interact with FTP servers.
            The URI may be relative or absolute.
            If the URI is of the form "ftp://contoso.com/%2fpath" (%2f is an escaped '/'), then the URI is absolute, and the current directory is /path.
            If, however, the URI is of the form "ftp://contoso.com/path", first the .NET Framework logs into the FTP server (using the user name and password set by the <see cref="P:InTheHand.Net.FtpWebRequest.Credentials"/> property), then the current directory is set to &lt;UserLoginDirectory&gt;/path.
            You must have a valid user name and password for the server or the server must allow anonymous logon.
            You can specify the credentials used to connect to the server by setting the <see cref="P:InTheHand.Net.FtpWebRequest.Credentials"/> property or you can include them in the <see cref="P:System.Uri.UserInfo"/> portion of the URI passed to the <see cref="M:System.Net.WebRequest.Create(System.String)"/> method.
            If you include <see cref="P:System.Uri.UserInfo"/> information in the URI, the <see cref="P:InTheHand.Net.FtpWebRequest.Credentials"/> property is set to a new network credential with the specified user name and password information.
            </remarks>
            <example>The following code example demonstrates deleting a file from an FTP server.
            <code lang="cs">
            public static bool DeleteFileOnServer(Uri serverUri)
            {
                FtpWebRequest.RegisterPrefix();
                // The serverUri parameter should use the ftp:// scheme.
                // It contains the name of the server file that is to be deleted.
                // Example: ftp://contoso.com/someFile.txt.
                // 
                
                if (serverUri.Scheme != Uri.UriSchemeFtp)
                {
                    return false;
                }
                // Get the object used to communicate with the server.
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(serverUri);
                request.Method = WebRequestMethods.Ftp.DeleteFile;
                
                FtpWebResponse response = (FtpWebResponse) request.GetResponse();
                Console.WriteLine("Delete status: {0}",response.StatusDescription);  
                response.Close();
                return true;
            }</code></example>
            <example>The following code example demonstrates downloading a file from an FTP server by using the <see cref="T:InTheHand.Net.WebClient"/> class.
            <code lang="cs">
            public static bool DisplayFileFromServer(Uri serverUri)
            {
                // The serverUri parameter should start with the ftp:// scheme.
                if (serverUri.Scheme != Uri.UriSchemeFtp)
                {
                    return false;
                }
                // Get the object used to communicate with the server.
                WebClient request = new WebClient();
                // This example assumes the FTP site uses anonymous logon.
                request.Credentials = new NetworkCredential ("anonymous","janeDoe@contoso.com");
                try 
                {
                    byte [] newFileData = request.DownloadData(serverUri.ToString());
                    string fileString = System.Text.Encoding.UTF8.GetString(newFileData);
                    Console.WriteLine(fileString);
                }
                catch (WebException e)
                {
                    Console.WriteLine(e.ToString());
                }
                return true;
            }</code></example>
            <example>The following code example demonstrates using asynchronous operations to upload a file to an FTP server.
            <code lang="cs">
            using System;
            using System.Net;
            using InTheHand.Net;
            using System.Threading;
            using System.IO;
            using InTheHand.IO;
            
            namespace Examples.InTheHand.Net
            {
                public class FtpState
                {
                    private ManualResetEvent wait;
                    private FtpWebRequest request;
                    private string fileName;
                    private Exception operationException = null;
                    string status;
                    
                    public FtpState()
                    {
                        wait = new ManualResetEvent(false);
                    }
                    
                    public ManualResetEvent OperationComplete
                    {
                        get {return wait;}
                    }
                    
                    public FtpWebRequest Request
                    {
                        get {return request;}
                        set {request = value;}
                    }
                    
                    public string FileName
                    {
                        get {return fileName;}
                        set {fileName = value;}
                    }
                    
                    public Exception OperationException
                    {
                        get {return operationException;}
                        set {operationException = value;}
                    }
                    
                    public string StatusDescription
                    {
                        get {return status;}
                        set {status = value;}
                    }
                }
                
                public class AsynchronousFtpUpLoader
                {  
                    // Command line arguments are two strings:
                    // 1. The url that is the name of the file being uploaded to the server.
                    // 2. The name of the file on the local machine.
                    //
                    public static void Main(string[] args)
                    {
                        FtpWebRequest.RegisterPrefix();
                        // Create a Uri instance with the specified URI string.
                        // If the URI is not correctly formed, the Uri constructor
                        // will throw an exception.
                        ManualResetEvent waitObject;
                    
                        Uri target = new Uri (args[0]);
                        string fileName = args[1];
                        FtpState state = new FtpState();
                        FtpWebRequest request = (FtpWebRequest)WebRequest.Create(target);
                        request.Method = WebRequestMethods.Ftp.UploadFile;
                    
                        // This example uses anonymous logon.
                        // The request is anonymous by default; the credential does not have to be specified. 
                        // The example specifies the credential only to
                        // control how actions are logged on the server.
                    
                        request.Credentials = new NetworkCredential ("anonymous","janeDoe@contoso.com");
                    
                        // Store the request in the object that we pass into the
                        // asynchronous operations.
                        state.Request = request;
                        state.FileName = fileName;
                    
                        // Get the event to wait on.
                        waitObject = state.OperationComplete;
                    
                        // Asynchronously get the stream for the file contents.
                        request.BeginGetRequestStream(
                            new AsyncCallback (EndGetStreamCallback), 
                            state
                            );
                        
                        // Block the current thread until all operations are complete.
                        waitObject.WaitOne();
                        
                        // The operations either completed or threw an exception.
                        if (state.OperationException != null)
                        {
                            throw state.OperationException;
                        }
                        else
                        {
                            Console.WriteLine("The operation completed - {0}", state.StatusDescription);
                        }
                    }
                    
                    private static void EndGetStreamCallback(IAsyncResult ar)
                    {
                        FtpState state = (FtpState) ar.AsyncState;
                        
                        Stream requestStream = null;
                        // End the asynchronous call to get the request stream.
                        try
                        {
                            requestStream = state.Request.EndGetRequestStream(ar);
                            // Copy the file contents to the request stream.
                            FileStream stream = File.OpenRead(state.FileName);
                            stream.CopyTo(requestStream);
                            stream.Close();
                            
                            Console.WriteLine ("Writing {0} bytes to the stream.", stream.Length);
                            // IMPORTANT: Close the request stream before sending the request.
                            requestStream.Close();
                            // Asynchronously get the response to the upload request.
                            state.Request.BeginGetResponse(
                                new AsyncCallback (EndGetResponseCallback), 
                                state
                                );
                        } 
                        // Return exceptions to the main application thread.
                        catch (Exception e)
                        {
                            Console.WriteLine("Could not get the request stream.");
                            state.OperationException = e;
                            state.OperationComplete.Set();
                            return;
                        }
                        
                    }
                        
                    // The EndGetResponseCallback method  
                    // completes a call to BeginGetResponse.
                    private static void EndGetResponseCallback(IAsyncResult ar)
                    {
                        FtpState state = (FtpState) ar.AsyncState;
                        FtpWebResponse response = null;
                        try 
                        {
                            response = (FtpWebResponse) state.Request.EndGetResponse(ar);
                            response.Close();
                            state.StatusDescription = response.StatusDescription;
                            // Signal the main application thread that 
                            // the operation is complete.
                            state.OperationComplete.Set();
                        }
                        // Return exceptions to the main application thread.
                        catch (Exception e)
                        {
                            Console.WriteLine ("Error getting response.");
                            state.OperationException = e;
                            state.OperationComplete.Set();
                        }
                    }
                }
            }
            </code></example>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.RegisterPrefix">
            <summary>
            Register this class with the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            <remarks>Once this method is called once you can use <see cref="M:System.Net.WebRequest.Create(System.String)"/> to create new <see cref="T:InTheHand.Net.FtpWebRequest"/> instances.</remarks>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new <see cref="T:InTheHand.Net.FtpWebRequest"/> instance for the specified URI.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.GetRequestStream">
            <summary>
            Retrieves the stream used to upload data to an FTP server.
            </summary>
            <returns>A writable <see cref="T:System.IO.Stream"/> instance used to store data to be sent to the server by the current request.</returns>
            <exception cref="T:System.Net.ProtocolViolationException">The <see cref="P:InTheHand.Net.FtpWebRequest.Method"/> property is not set to <see cref="F:InTheHand.Net.WebRequestMethods.Ftp.UploadFile"/> or <see cref="F:InTheHand.Net.WebRequestMethods.Ftp.AppendFile"/>.</exception>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.GetResponse">
            <summary>
            Returns the FTP server response.
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> reference that contains an <see cref="T:InTheHand.Net.FtpWebResponse"/> instance.
            This object contains the FTP server's response to the request.</returns>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
            Begins sending a request and receiving a response from an FTP server asynchronously.
            </summary>
            <param name="callback">An <see cref="T:System.AsyncCallback"/> delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the operation.
            This object is passed to the callback delegate when the operation completes.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> instance that indicates the status of the operation.</returns>
        </member>
        <member name="M:InTheHand.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous operation started with <see cref="M:InTheHand.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> that was returned when the operation started.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> reference that contains an <see cref="T:InTheHand.Net.FtpWebResponse"/> instance.
            This object contains the FTP server's response to the request.</returns>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.ContentLength">
            <summary>
            This property supports the .NET Compact Framework infrastructure and is not intended to be used directly from your code. 
            Gets or sets a value that is ignored by the <see cref="T:InTheHand.Net.FtpWebRequest"/> class.
            </summary>
            <remarks>The <see cref="P:InTheHand.Net.FtpWebRequest.ContentLength"/> property is provided only for compatibility with other implementations of the <see cref="T:System.Net.WebRequest"/> and <see cref="T:System.Net.WebResponse"/> classes.
            There is no reason to use <see cref="P:InTheHand.Net.FtpWebRequest.ContentLength"/>.</remarks>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.ContentType">
            <summary>
            This property supports the .NET Compact Framework infrastructure and is not intended to be used directly from your code. 
            Always throws a <see cref="T:System.NotSupportedException"/>. 
            </summary>
            <remarks>The <see cref="P:InTheHand.Net.FtpWebRequest.ContentType"/> property is provided only for compatibility with other implementations of the <see cref="T:System.Net.WebRequest"/> and <see cref="T:System.Net.WebResponse"/> classes.
            There is no reason to use <see cref="P:InTheHand.Net.FtpWebRequest.ContentType"/>.</remarks>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.Credentials">
            <summary>
            Gets or sets the credentials used to communicate with the FTP server.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.Headers">
            <summary>
            This property supports the .NET Compact Framework infrastructure and is not intended to be used directly from your code.
            Gets an empty <see cref="T:System.Net.WebHeaderCollection"/> object.
            </summary>
            <value>An empty <see cref="T:System.Net.WebHeaderCollection"/> object.</value>
            <remarks>The <see cref="P:InTheHand.Net.FtpWebRequest.Headers"/> property is provided only for compatibility with other implementations of the <see cref="T:System.Net.WebRequest"/> and <see cref="T:System.Net.WebResponse"/> classes.
            There is no reason to use <see cref="P:InTheHand.Net.FtpWebRequest.Headers"/>.</remarks>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.Method">
            <summary>
            Gets or sets the command to send to the FTP server. 
            </summary>
            <value>A <see cref="T:System.String"/> value that contains the FTP command to send to the server.
            The default value is <see cref="F:InTheHand.Net.WebRequestMethods.Ftp.DownloadFile"/>.</value>
            <remarks>The Method property determines which command is sent to the server.
            You set the Method by using the strings defined in the public field members of the <see cref="T:InTheHand.Net.WebRequestMethods.Ftp"/> class.
            Note that the strings defined in the <see cref="T:InTheHand.Net.WebRequestMethods.Ftp"/> class are the only supported options for the Method property.
            Setting the Method property to any other value will result in an <see cref="T:System.ArgumentException"/> exception.</remarks>
            <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
            <exception cref="T:System.ArgumentException">The method is invalid.
            <para>- or -</para>
            <para>The method is not supported.</para>
            <para>- or -</para>
            <para>Multiple methods were specified.</para>
            </exception>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.PreAuthenticate">
            <summary>
            This API supports the .NET Compact Framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.RenameTo">
            <summary>
            Gets or sets the new name of a file being renamed.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.RequestUri">
            <summary>
            Gets the URI requested by this instance.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.Timeout">
            <summary>
            Not supported for FTP. Gets or sets the number of milliseconds to wait for a request.
            </summary>
            <value>An <see cref="T:System.Int32"/> value that contains the number of milliseconds to wait before a request times out.
            The default value is Infinite.</value>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.UseBinary">
            <summary>
            Gets or sets a Boolean value that specifies the data type for file transfers.
            </summary>
            <value>true to indicate to the server that the data to be transferred is binary; false to indicate that the data is text.
            The default value is true.</value>
            <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
        </member>
        <member name="P:InTheHand.Net.FtpWebRequest.UsePassive">
            <summary>
            Gets or sets the behavior of a client application's data transfer process.
            </summary>
            <value>false if the client application's data transfer process listens for a connection on the data port; otherwise, true if the client should initiate a connection on the data port.
            The default value is true.</value>
            <exception cref="T:System.InvalidOperationException">A new value was specified for this property for a request that is already in progress.</exception>
        </member>
        <member name="T:InTheHand.Net.FileWebResponse">
            <summary>
            Provides a file system implementation of the <see cref="T:System.Net.WebResponse"/> class.
            </summary>
            <remarks><para>Equivalent to System.Net.FileWebResponse</para>
            The FileWebResponse class implements the <see cref="T:System.Net.WebResponse"/> abstract base class to return file system resources for the <see cref="T:InTheHand.Net.FileWebRequest"/> class.
            <para>Client applications do not create FileWebResponse instances directly; instead, they are created by calling the <see cref="M:InTheHand.Net.FileWebRequest.GetResponse"/> method on a <see cref="T:InTheHand.Net.FileWebRequest"/> instance.</para>
            <para>The <see cref="M:InTheHand.Net.FileWebResponse.GetResponseStream"/> method returns a <see cref="T:System.IO.Stream"/> instance that provides read-only access to a file system resource.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.FileWebResponse.GetResponseStream">
            <summary>
            Returns the data stream from the file system resource.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> for reading data from the file system resource.</returns>
        </member>
        <member name="M:InTheHand.Net.FileWebResponse.Close">
            <summary>
            Frees the resources held by the response.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FileWebResponse.ContentLength">
            <summary>
            Gets the length of the content in the file system resource.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FileWebResponse.ContentType">
            <summary>
            Gets the content type of the file system resource.
            </summary>
            <value>The value "binary/octet-stream".</value>
            <remarks>The ContentType property contains the content type of the file system resource.
            The value of ContentType is always "binary/octet-stream".</remarks>
        </member>
        <member name="P:InTheHand.Net.FileWebResponse.ResponseUri">
            <summary>
            Gets the URI that sent the response to the request.
            </summary>
            <value>A Uri that contains the URI of the file system resource that provided the response.</value>
            <remarks>The ResponseUri property contains the URI of the file system resource that provided the response.
            This is always the file system resource that was requested.</remarks>
        </member>
        <member name="T:InTheHand.Net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_could_not_connect">
            <summary>
              Looks up a localized string similar to Could not establish connection to network..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_invalid_method_name">
            <summary>
              Looks up a localized string similar to Method names cannot be null or empty..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_nonClsCompliantException">
            <summary>
              Looks up a localized string similar to A non-CLS Compliant Exception (i.e. an object that does not derive from System.Exception) was thrown..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_reqsubmitted">
            <summary>
              Looks up a localized string similar to This operation cannot be performed after the request has been submitted..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_unsupported_method">
            <summary>
              Looks up a localized string similar to This method is not supported..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_webclient">
            <summary>
              Looks up a localized string similar to An exception occurred during a WebClient request..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_webclient_invalid_baseaddress">
            <summary>
              Looks up a localized string similar to The specified value is not a valid base address..
            </summary>
        </member>
        <member name="P:InTheHand.Net.Properties.Resources.net_webclient_no_concurrent_io_allowed">
            <summary>
              Looks up a localized string similar to WebClient does not support concurrent I/O operations..
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames">
            <summary>
            Specifies the media type information for an object.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Application">
            <summary>
            Specifies the type of text data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Application.Octet">
            <summary>
            Specifies that the application data is not interpreted.
            </summary>
            <remarks>The Octet member designates that the attachment contains generic binary data.</remarks>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Application.Pdf">
            <summary>
            Specifies that the application data is in Portable Document Format (PDF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Application.Rtf">
            <summary>
            Specifies that the application data is in Rich Text Format (RTF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Application.Soap">
            <summary>
            Specifies that the application data is a SOAP document.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Application.Zip">
            <summary>
            Specifies that the application data is compressed.
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Image">
            <summary>
            Specifies the type of image data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Gif">
            <summary>
            Specifies that the image data is in Graphics Interchange Format (GIF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Jpg">
            <summary>
            Specifies that the image data is in Joint Photographic Experts Group (JPEG) format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Image.Tiff">
            <summary>
            Specifies that the image data is in Tagged Image File Format (TIFF).
            </summary>
        </member>
        <member name="T:InTheHand.Net.Mime.MediaTypeNames.Text">
            <summary>
            Specifies the type of text data in an object.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Html">
            <summary>
            Specifies that the data is in HTML format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Plain">
            <summary>
            Specifies that the data is in plain text format.
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.RichText">
            <summary>
            Specifies that the data is in Rich Text Format (RTF).
            </summary>
        </member>
        <member name="F:InTheHand.Net.Mime.MediaTypeNames.Text.Xml">
            <summary>
            Specifies that the data is in XML format.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebRequestInTheHand">
            <summary>
            Helper methods for <see cref="T:System.Net.WebRequest"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Net.WebRequestInTheHand.CreateHttp(System.String)">
            <summary>
            Initializes a new <see cref="T:System.Net.HttpWebRequest"/> instance for the specified URI string.
            </summary>
            <param name="requestUriString">A URI string that identifies the Internet resource.</param>
            <returns>An <see cref="T:System.Net.HttpWebRequest"/> instance for the specific URI string.</returns>
        </member>
        <member name="M:InTheHand.Net.WebRequestInTheHand.CreateHttp(System.Uri)">
            <summary>
            Initializes a new <see cref="T:System.Net.HttpWebRequest"/> instance for the specified URI.
            </summary>
            <param name="requestUri">A URI that identifies the Internet resource.</param>
            <returns>An <see cref="T:System.Net.HttpWebRequest"/> instance for the specific URI.</returns>
            <exception cref="T:System.NotSupportedException">The request scheme specified in requestUri is the http or https scheme.</exception>
            <exception cref="T:System.ArgumentNullException">requestUri is null.</exception>
        </member>
        <member name="T:InTheHand.Net.FileWebRequest">
            <summary>
            Provides a file system implementation of the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            <remarks>The FileWebRequest class implements the <see cref="T:System.Net.WebRequest"/> abstract base class for Uniform Resource Identifiers (URIs) that use the file:// scheme to request local files.
            <para>You must call the static method <see cref="M:InTheHand.Net.FileWebRequest.RegisterPrefix"/> before this class can be used with <see cref="M:System.Net.WebRequest.Create(System.String)"/>.
            You only need to call <see cref="M:InTheHand.Net.FileWebRequest.RegisterPrefix"/> once in your application.</para>
            <para>To obtain an instance of <see cref="T:InTheHand.Net.FileWebRequest"/>, use the <see cref="M:System.Net.WebRequest.Create(System.String)"/> method after calling <see cref="M:InTheHand.Net.FileWebRequest.RegisterPrefix"/>.
            You can also use the <see cref="T:InTheHand.Net.WebClient"/> class to upload and download files.</para></remarks>
            <example>The following code example uses the FileWebRequest class to access a file system resource.
            <code lang="vbnet">
            '
            ' This example creates or opens a text file and stores a string in it. 
            ' Both the file and the string are passed by the user.
            ' Note. For this program to work, the folder containing the test file
            ' must be shared, with its permissions set to allow write access. 
            
            Imports System.Net
            Imports System
            Imports System.Diagnostics
            Imports System.IO
            Imports System.Text
            Imports InTheHand.Net
            
            Namespace Mssc.PluggableProtocols.File
            
                Module TestGetRequestStream
            
                    Class TestGetRequestStream
            
                        Private Shared myFileWebRequest As FileWebRequest
            
                        ' Show how to use this program.
                        Private Shared Sub showUsage()
                            Console.WriteLine(ControlChars.Lf + "Please enter file name and timeout :")
                            Console.WriteLine("Usage: vb_getrequeststream &lt;systemname&gt;/&lt;sharedfoldername&gt;/&lt;filename&gt; timeout")
                            Console.WriteLine("Example: vb_getrequeststream ngetrequestrtream() ndpue/temp/hello.txt  1000")
                            Console.WriteLine("Small time-out values (for example, 3 or less) cause a time-out exception.")
                        End Sub
            
                        Private Shared Sub makeFileRequest(ByVal fileName As String, ByVal timeout As Integer)
                            Try
                                ' Create a Uri object.to access the file requested by the user. 
                                Dim myUrl As New Uri("file://" + fileName)
            
                                ' Create a FileWebRequest object.for the requeste file.
                                myFileWebRequest = CType(WebRequest.CreateDefault(myUrl), FileWebRequest)
            
                                ' Set the time-out to the value selected by the user.
                                myFileWebRequest.Timeout = timeout
            
                                ' Set the Method property to POST  
                                myFileWebRequest.Method = "POST"
            
                            Catch e As WebException
                                Console.WriteLine(("WebException is: " + e.Message))
                            Catch e As UriFormatException
                                Console.WriteLine(("UriFormatWebException is: " + e.Message))
                            End Try
            
                        End Sub
            
                        Private Shared Sub writeToFile()
                            Try
                                ' Enter the string to write to the file.
                                Console.WriteLine("Enter the string you want to write:")
                                Dim userInput As String = Console.ReadLine()
            
                                ' Convert the string to a byte array.
                                Dim encoder As New ASCIIEncoding
                                Dim byteArray As Byte() = encoder.GetBytes(userInput)
            
                                ' Set the ContentLength property.
                                myFileWebRequest.ContentLength = byteArray.Length
            
                                Dim contentLength As String = myFileWebRequest.ContentLength.ToString()
            
                                Console.WriteLine(ControlChars.Lf + "The content length is {0}.", contentLength)
            
            
                                ' Get the file stream handler to write to the file.
                                Dim readStream As Stream = myFileWebRequest.GetRequestStream()
            
                                ' Write to the stream. 
                                ' Note. For this to work the file must be accessible
                                ' on the network. This can be accomplished by setting the property
                                ' sharing of the folder containg the file.  
                                ' FileWebRequest.Credentials property cannot be used for this purpose.
                                readStream.Write(byteArray, 0, userInput.Length)
            
            
                                Console.WriteLine(ControlChars.Lf + "The String you entered was successfully written to the file.")
            
                                readStream.Close()
            
                            Catch e As WebException
                                Console.WriteLine(("WebException is: " + e.Message))
                            Catch e As UriFormatException
                                Console.WriteLine(("UriFormatWebException is: " + e.Message))
                            End Try
            
                        End Sub
            
                        Public Shared Sub Main(ByVal args() As String)
            
                            If args.Length &lt; 2 Then
                                showUsage()
                            Else
                                makeFileRequest(args(0), Integer.Parse(args(1)))
                                writeToFile()
                            End If
            
                        End Sub 'Main
            
                    End Class 'TestGetRequestStream
            
                End Module
            
            End Namespace
            </code>
            </example>
        </member>
        <member name="M:InTheHand.Net.FileWebRequest.RegisterPrefix">
            <summary>
            Register this class with the <see cref="T:System.Net.WebRequest"/> class.
            </summary>
            <remarks>Once this method is called once you can use <see cref="M:System.Net.WebRequest.Create(System.String)"/> to create new <see cref="T:InTheHand.Net.FileWebRequest"/> instances.</remarks>
        </member>
        <member name="M:InTheHand.Net.FileWebRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new <see cref="T:InTheHand.Net.FileWebRequest"/> instance for the specified URI.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:InTheHand.Net.FileWebRequest.GetRequestStream">
            <summary>
            Returns a <see cref="T:System.IO.Stream"/> object for writing data to the file system resource.
            </summary>
            <returns>A writable <see cref="T:System.IO.Stream"/> instance used to store data to be sent to the server by the current request.</returns>
        </member>
        <member name="M:InTheHand.Net.FileWebRequest.GetResponse">
            <summary>
            Returns a response to a file system request.
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> that contains the response from the file system resource.</returns>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.ContentLength">
            <summary>
            Gets or sets the content length of the data being sent.
            </summary>
            <value>The number of bytes of request data being sent.</value>
            <exception cref="T:System.ArgumentException">ContentLength is less than 0.</exception>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.ContentType">
            <summary>
            Gets or sets the content type of the data being sent.
            This property is reserved for future use.
            </summary>
            <remarks>The ContentType property contains the media type of the data being sent.
            This is typically the MIME encoding of the content.
            The ContentType property is currently not used by the FileWebRequest class.</remarks>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.Credentials">
            <summary>
            Gets or sets the credentials that are associated with this request.
            This property is reserved for future use.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.Headers">
            <summary>
            Gets a collection of the name/value pairs that are associated with the request.
            This property is reserved for future use.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> that contains header name/value pairs associated with this request.</value>
            <remarks>The <see cref="P:InTheHand.Net.FileWebRequest.Headers"/> property is currently not used by the <see cref="T:InTheHand.Net.FileWebRequest"/> class.</remarks>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.Method">
            <summary>
            Gets or sets the protocol method used for the request.
            This property is reserved for future use.
            </summary>
            <value>The protocol method to use in this request.</value>
            <remarks>The Method property is currently not used by the FileWebRequest class.</remarks>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.PreAuthenticate">
            <summary>
            Gets or sets a value that indicates whether to preauthenticate a request.
            This property is reserved for future use.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.Proxy">
            <summary>
            Gets or sets the network proxy to use for this request.
            This property is reserved for future use.
            </summary>
            <value>An <see cref="T:System.Net.IWebProxy"/> that indicates the network proxy to use for this request.</value>
            <remarks>The Proxy property is currently not used by the FileWebRequest class.</remarks>
        </member>
        <member name="P:InTheHand.Net.FileWebRequest.RequestUri">
            <summary>
            Gets the URI requested by this instance.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebRequestMethods">
            <summary>
            Container class for <see cref="T:InTheHand.Net.WebRequestMethods.Ftp"/> and <see cref="T:InTheHand.Net.WebRequestMethods.Http"/> classes.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebRequestMethods.File">
            <summary>
            Represents the types of file protocol methods that can be used with a FILE request.
            </summary>
            <remarks>The members of this class can be used to set the <see cref="P:System.Net.WebRequest.Method"/> property that determines the protocol method that is to be used to perform a requested action, such as uploading or downloading a file.</remarks>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.File.DownloadFile">
            <summary>
            Represents the FILE GET protocol method that is used to retrieve a file from a specified location. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.File.UploadFile">
            <summary>
            Represents the FILE PUT protocol method that is used to copy a file to a specified location.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebRequestMethods.Ftp">
            <summary>
            Represents the types of FTP protocol methods that can be used with an FTP request.
            </summary>
            <remarks>The members of this class can be used to set the <see cref="P:System.Net.WebRequest.Method"/> property that determines the protocol method that is to be used to perform a requested action, such as uploading or downloading a file.</remarks>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.AppendFile">
            <summary>
            Represents the FTP APPE protocol method that is used to append a file to an existing file on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.DeleteFile">
            <summary>
            Represents the FTP DELE protocol method that is used to delete a file on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.DownloadFile">
            <summary>
            Represents the FTP RETR protocol method that is used to download a file from an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.GetDateTimestamp">
            <summary>
            Represents the FTP MDTM protocol method that is used to download a timestamp for a file from an FTP server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.GetFileSize">
            <summary>
            Represents the FTP SIZE protocol method that is used to retrieve the size of a file on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.ListDirectory">
            <summary>
            Represents the FTP NLIST protocol method that gets a short listing of the files on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.ListDirectoryDetails">
            <summary>
            Represents the FTP LIST protocol method that gets a detailed listing of the files on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.MakeDirectory">
            <summary>
            Represents the FTP MKD protocol method creates a directory on an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.PrintWorkingDirectory">
            <summary>
            Represents the FTP PWD protocol method that prints the name of the current working directory. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.RemoveDirectory">
            <summary>
            Represents the FTP RMD protocol method that removes a directory. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.Rename">
            <summary>
            Represents the FTP RENAME protocol method that renames a directory. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.UploadFile">
            <summary>
            Represents the FTP STOR protocol method that uploads a file to an FTP server. 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Ftp.UploadFileWithUniqueName">
            <summary>
            Represents the FTP STOU protocol that uploads a file with a unique name to an FTP server. 
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebRequestMethods.Http">
            <summary>
            Represents the types of HTTP protocol methods that can be used with an HTTP request.
            </summary>
            <remarks>The members of this class can be used to set the <see cref="P:System.Net.WebRequest.Method"/> property that determines the protocol method that is to be used to perform a requested action, such as uploading or downloading a file.</remarks>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.Connect">
            <summary>
            Represents the HTTP CONNECT protocol method that is used with a proxy that can dynamically switch to tunneling, as in the case of SSL tunneling.
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.Get">
            <summary>
            Represents an HTTP GET protocol method.
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.Head">
            <summary>
            Represents an HTTP HEAD protocol method.
            The HEAD method is identical to GET except that the server only returns message-headers in the response, without a message-body.
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.MkCol">
            <summary>
            Represents an HTTP MKCOL request that creates a new collection (such as a collection of pages) at the location specified by the request-Uniform Resource Identifier (URI). 
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.Post">
            <summary>
            Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.
            </summary>
        </member>
        <member name="F:InTheHand.Net.WebRequestMethods.Http.Put">
            <summary>
            Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebUtility">
            <summary>
            Provides methods for encoding and decoding URLs when processing Web requests.
            </summary>
            <remarks>Equivalent to System.Net.WebUtility in .NET Framework 4.0 or HttpUtility in Silverlight.</remarks>
        </member>
        <member name="M:InTheHand.Net.WebUtility.HtmlEncode(System.String)">
            <summary>
            Converts a string to an HTML-encoded string.
            </summary>
            <param name="value">The string to encode.</param>
            <returns>An encoded string.</returns>
            <remarks>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end.
            HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding.
            For example, when embedded in a block of text, the characters &lt; and &gt; are encoded as &amp;lt; and &amp;gt; for HTTP transmission.
            <para>If the value parameter is a null reference (Nothing in Visual Basic), then the returned encoded string is a null reference (Nothing in Visual Basic).
            If the value parameter is an empty string, then the returned encoded string is an empty string.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            Converts a string into an HTML-encoded string, and returns the output as a <see cref="T:System.IO.TextWriter"/> stream of output.
            </summary>
            <param name="value">The string to encode.</param>
            <param name="output">A <see cref="T:System.IO.TextWriter"/> output stream.</param>
            <remarks>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end.
            HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding.
            For example, when embedded in a block of text, the characters &lt; and &gt; are encoded as &amp;lt; and &amp;gt; for HTTP transmission.</remarks>
        </member>
        <member name="M:InTheHand.Net.WebUtility.HtmlDecode(System.String)">
            <summary>
            Converts a string that has been HTML-encoded for HTTP transmission into a decoded string.
            </summary>
            <param name="value">The string to decode.</param>
            <returns>A decoded string.</returns>
            <remarks>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end.
            HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding.
            For example, when embedded in a block of text, the characters &lt; and &gt; are encoded as &amp;lt; and &amp;gt; for HTTP transmission.
            <para>If the value parameter is a null reference (Nothing in Visual Basic), then the returned decoded string is a null reference (Nothing in Visual Basic).
            If the value parameter is an empty string, then the returned decoded string is an empty string.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Converts a string that has been HTML-encoded into a decoded string, and sends the decoded string to a <see cref="T:System.IO.TextWriter"/> output stream.
            </summary>
            <param name="value">The string to decode.</param>
            <param name="output">A <see cref="T:System.IO.TextWriter"/> stream of output.</param>
            <remarks>If characters such as blanks and punctuation are passed in an HTTP stream, they might be misinterpreted at the receiving end.
            HTML encoding converts characters that are not allowed in HTML into character-entity equivalents; HTML decoding reverses the encoding.
            For example, when embedded in a block of text, the characters &lt; and &gt; are encoded as &amp;lt; and &amp;gt; for HTTP transmission.</remarks>
        </member>
        <member name="T:InTheHand.Net.UploadDataCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.UploadDataCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.UploadDataCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:InTheHand.Net.UploadDataCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.UploadDataCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadDataCompletedEventArgs.Result">
            <summary>
            Gets the server reply to a data upload operation started by calling an <see cref="M:InTheHand.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.UploadFileCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.UploadFileCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.UploadFileCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:InTheHand.Net.UploadFileCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.UploadFileCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadFileCompletedEventArgs.Result">
            <summary>
            Gets the server reply to a data upload operation that is started by calling an <see cref="M:InTheHand.Net.WebClient.UploadFileAsync(System.Uri,System.String)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.UploadStringCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.UploadStringCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.UploadStringCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:InTheHand.Net.UploadStringCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.UploadStringCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadStringCompletedEventArgs.Result">
            <summary>
            Gets the server reply to a string upload operation that is started by calling an <see cref="M:InTheHand.Net.WebClient.UploadStringAsync(System.Uri,System.String)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.UploadValuesCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.UploadValuesCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.UploadValuesCompletedEventArgs"/> that contains event data.</param>
        </member>
        <member name="T:InTheHand.Net.UploadValuesCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.UploadValuesCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadValuesCompletedEventArgs.Result">
            <summary>
            Gets the server reply to a data upload operation started by calling an <see cref="M:InTheHand.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.DownloadDataCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.DownloadDataCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DownloadDataCompletedEventArgs.Result">
            <summary>
            Gets the data that is downloaded by a <see cref="M:InTheHand.Net.WebClient.DownloadDataAsync(System.Uri)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.DownloadDataCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.DownloadDataCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.DownloadDataCompletedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:InTheHand.Net.DownloadStringCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DownloadStringCompletedEventArgs.Result">
            <summary>
            Gets the data that is downloaded by a <see cref="M:InTheHand.Net.WebClient.DownloadStringAsync(System.Uri)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Net.DownloadStringCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.DownloadStringCompletedEventArgs"/> that contains event data.</param>
            <remarks>When you create a <see cref="T:InTheHand.Net.DownloadStringCompletedEventHandler"/> delegate, you identify the method that will handle the event.
            To associate the event with your event handler, add an instance of the delegate to the event.
            The event handler is called whenever the event occurs, unless you remove the delegate.
            </remarks>
        </member>
        <member name="T:InTheHand.Net.DownloadProgressChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.DownloadProgressChanged"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.Net.DownloadProgressChangedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:InTheHand.Net.DownloadProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.DownloadProgressChanged"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DownloadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total number of bytes in a <see cref="T:InTheHand.Net.WebClient"/> data upload operation.
            </summary>
        </member>
        <member name="T:InTheHand.Net.UploadProgressChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:InTheHand.Net.WebClient.UploadProgressChanged"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:InTheHand.Net.UploadProgressChangedEventArgs"/> containing event data.</param>
        </member>
        <member name="T:InTheHand.Net.UploadProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Net.WebClient.UploadProgressChanged"/> event of a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadProgressChangedEventArgs.BytesReceived">
            <summary>
            Gets the number of bytes received.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
            <summary>
            Gets the total number of bytes in a <see cref="T:InTheHand.Net.WebClient"/> data upload operation.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadProgressChangedEventArgs.BytesSent">
            <summary>
            Gets the number of bytes sent.
            </summary>
        </member>
        <member name="P:InTheHand.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
            <summary>
            Gets the total number of bytes to send.
            </summary>
        </member>
        <member name="T:InTheHand.Net.DnsEndPoint">
            <summary>
            Represents a network endpoint as a host name or a string representation of an IP address and a port number.
            </summary>
            <remarks>The <see cref="T:InTheHand.Net.DnsEndPoint"/> class contains a host name or an IP address and remote port information needed by an application to connect to a service on a host.
            By combining the host name or IP address and port number of a service, the <see cref="T:InTheHand.Net.DnsEndPoint"/> class forms a connection point to a service.</remarks>
        </member>
        <member name="M:InTheHand.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.DnsEndPoint"/> class with the host name or string representation of an IP address and a port number.
            </summary>
            <param name="host">The host name or a string representation of the IP address.</param>
            <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
            <remarks>The DnsEndPoint(String, Int32) constructor can be used to initialize a <see cref="T:InTheHand.Net.DnsEndPoint"/> class using either a host name or a string that represents an IP address and a port.
            This constructor sets the <see cref="P:InTheHand.Net.DnsEndPoint.AddressFamily"/> property to <see cref="F:System.Net.Sockets.AddressFamily.Unknown"/>. 
            When using this constructor with a host name rather than a string representation of an IP address, the address family of the <see cref="T:InTheHand.Net.DnsEndPoint"/> will remain <see cref="F:System.Net.Sockets.AddressFamily.Unknown"/> even after use.
            The <see cref="P:InTheHand.Net.DnsEndPoint.AddressFamily"/> property of any <see cref="T:System.Net.Sockets.Socket"/> that is created by calls to the ConnectAsync method will be the address family of the first address to which a connection can be successfully established (not necessarily the first address to be resolved).</remarks>
        </member>
        <member name="M:InTheHand.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Net.DnsEndPoint"/> class with the host name or string representation of an IP address and a port number.
            </summary>
            <param name="host">The host name or a string representation of the IP address.</param>
            <param name="port">The port number associated with the address, or 0 to specify any available port. port is in host order.</param>
            <param name="addressFamily">The address family of the address.</param>
            <remarks>The DnsEndPoint(String, Int32) constructor can be used to initialize a <see cref="T:InTheHand.Net.DnsEndPoint"/> class using either a host name or a string that represents an IP address and a port.
            When using this constructor with a host name rather than a string representation of an IP address, the address family of the <see cref="T:InTheHand.Net.DnsEndPoint"/> will remain <see cref="F:System.Net.Sockets.AddressFamily.Unknown"/> even after use.
            The <see cref="P:InTheHand.Net.DnsEndPoint.AddressFamily"/> property of any <see cref="T:System.Net.Sockets.Socket"/> that is created by calls to the ConnectAsync method will be the address family of the first address to which a connection can be successfully established (not necessarily the first address to be resolved).</remarks>
        </member>
        <member name="M:InTheHand.Net.DnsEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Net.DnsEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress"></param>
            <returns></returns>
        </member>
        <member name="P:InTheHand.Net.DnsEndPoint.AddressFamily">
            <summary>
            Gets the Internet Protocol (IP) address family.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DnsEndPoint.Host">
            <summary>
            Gets the host name or string representation of the Internet Protocol (IP) address of the host.
            </summary>
        </member>
        <member name="P:InTheHand.Net.DnsEndPoint.Port">
            <summary>
            Gets the port number of the <see cref="T:InTheHand.Net.DnsEndPoint"/>.
            </summary>
        </member>
        <member name="T:InTheHand.Net.WebClient">
            <summary>
            Provides helper methods for sending data to and receiving data from a resource identified by a URI.
            </summary>
            <remarks>Equivalent to System.Net.WebClient</remarks>
        </member>
        <member name="M:InTheHand.Net.WebClient.GetWebRequest(System.Uri)">
            <summary>
            Returns a <see cref="T:System.Net.WebRequest"/> object for the specified resource.
            </summary>
            <param name="address">A <see cref="T:System.Uri"/> that identifies the resource to request.</param>
            <returns>A new <see cref="T:System.Net.WebRequest"/> object for the specified resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.GetWebResponse(System.Net.WebRequest)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse"/> for the specified <see cref="T:System.Net.WebRequest"/>. 
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest"/> that is used to obtain the response.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> for the specified <see cref="T:System.Net.WebRequest"/>.</returns>
            <remarks>The object returned by this method is obtained by calling the <see cref="M:System.Net.WebRequest.GetResponse"/> method on the specified <see cref="T:System.Net.WebRequest"/> object. 
            This method can be called only by classes that inherit from <see cref="T:InTheHand.Net.WebClient"/>.
            It is provided to give inheritors access to the underlying <see cref="T:System.Net.WebResponse"/> object.
            </remarks>
            <example>The following code example shows an implementation of this method that can be customized by a class derived from <see cref="T:InTheHand.Net.WebClient"/>.
            <code lang="cs">
            protected override WebResponse GetWebResponse (WebRequest request)
            {
                WebResponse response = base.GetWebResponse (request);
                // Perform any custom actions with the response ...
                return response;
            }
            </code></example>
        </member>
        <member name="M:InTheHand.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
            <summary>
            Returns the <see cref="T:System.Net.WebResponse"/> for the specified WebRequest using the specified <see cref="T:System.IAsyncResult"/>.
            </summary>
            <param name="request">A <see cref="T:System.Net.WebRequest"/> that is used to obtain the response.</param>
            <param name="result">An <see cref="T:System.IAsyncResult"/> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)"/>.</param>
            <returns>A <see cref="T:System.Net.WebResponse"/> containing the response for the specified <see cref="T:System.Net.WebRequest"/>.</returns>
            <example>The following code example shows an implementation of this method that can be customized by a class derived from WebClient.
            <code lang="cs">
            protected override WebResponse GetWebResponse (WebRequest request, IAsyncResult result)
            {
                WebResponse response = base.GetWebResponse (request, result);
                // Perform any custom actions with the response ...
                return response;
            }</code>
            </example>
        </member>
        <member name="M:InTheHand.Net.WebClient.CancelAsync">
            <summary>
            Cancels a pending asynchronous operation.
            </summary>
            <remarks>If an operation is pending, this method calls Abort on the underlying <see cref="T:System.Net.WebRequest"/>.
            When you call CancelAsync, your application still receives the completion event associated with the operation.
            For example, when you call CancelAsync to cancel a <see cref="M:InTheHand.Net.WebClient.DownloadStringAsync(System.Uri)"/> operation, if you have specified an event handler for the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event, your event handler receives notification that the operation has ended.
            To learn whether the operation completed successfully, check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> property on the base class of <see cref="T:InTheHand.Net.DownloadStringCompletedEventArgs"/> in the event data object passed to the event handler. 
            If no asynchronous operation is in progress, this method does nothing.</remarks>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadData(System.String)">
            <summary>
            Downloads data at the specified URI as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <returns>A Byte array containing the downloaded resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadData(System.Uri)">
            <summary>
            Downloads data at the specified URI as a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <returns>A Byte array containing the downloaded resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadDataAsync(System.Uri)">
            <summary>
            Downloads the specified resource as a <see cref="T:System.Byte"/> array.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to download.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)">
            <summary>
            Downloads the specified resource as a <see cref="T:System.Byte"/> array.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to download.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnDownloadDataCompleted(InTheHand.Net.DownloadDataCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.DownloadDataCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.DownloadDataCompletedEventArgs"/> object that contains event data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadFile(System.String,System.String)">
            <summary>
            Downloads the resource with the specified URI to a local file.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <param name="fileName">The name of the local file that is to receive the data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadFile(System.Uri,System.String)">
            <summary>
            Downloads the resource with the specified URI to a local file.
            </summary>
            <param name="address">The URI specified as a String, from which to download data.</param>
            <param name="fileName">The name of the local file that is to receive the data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadFileAsync(System.Uri,System.String)">
            <summary>
            Downloads, to a local file, the resource with the specified URI.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to download.</param>
            <param name="fileName">The name of the file to be placed on the local computer.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
            <summary>
            Downloads, to a local file, the resource with the specified URI.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to download.</param>
            <param name="fileName">The name of the file to be placed on the local computer.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.DownloadFileCompleted"/> event.
            </summary>
            <param name="e">An <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> object containing event data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadString(System.String)">
            <summary>
            Downloads the specified resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <returns>A <see cref="T:System.String"/> containing the specified resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadString(System.Uri)">
            <summary>
            Downloads the specified resource as a <see cref="T:System.String"/>.
            </summary>
            <param name="address">The URI from which to download data.</param>
            <returns>A <see cref="T:System.String"/> containing the specified resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadStringAsync(System.Uri)">
            <summary>
            Downloads the resource specified as a <see cref="T:System.Uri"/>. This method does not block the calling thread.
            </summary>
            <param name="address">A <see cref="T:System.Uri"/> containing the URI to download.</param>
            <remarks>This method retrieves the specified resource using the GET method.
            The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.
            <para>After downloading the resource, this method uses the encoding specified in the <see cref="P:InTheHand.Net.WebClient.Encoding"/> property to convert the resource to a <see cref="T:System.String"/>.
            This method does not block the calling thread while downloading the resource.
            To download a resource and block while waiting for the server's response, use the <see cref="M:InTheHand.Net.WebClient.DownloadString(System.String)"/> method.
            When the download completes, the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event is raised.
            Your application must handle this event to receive notification.
            The downloaded string is available in the <see cref="P:InTheHand.Net.DownloadStringCompletedEventArgs.Result"/> property.</para>
            <para>You can use the <see cref="M:InTheHand.Net.WebClient.CancelAsync"/> method to cancel asynchronous operations that have not completed.</para>
            <para>If the <see cref="P:InTheHand.Net.WebClient.BaseAddress"/> property is not an empty string ("") and address does not contain an absolute URI, address must be a relative URI that is combined with <see cref="P:InTheHand.Net.WebClient.BaseAddress"/> to form the absolute URI of the requested data.
            If the <see cref="P:InTheHand.Net.WebClient.QueryString"/> property is not an empty string, it is appended to address.</para>
            <para>This method uses the RETR command to download an FTP resource.
            For an HTTP resource, the GET method is used.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
            <summary>
            Downloads the resource specified as a <see cref="T:System.Uri"/>. This method does not block the calling thread.
            </summary>
            <param name="address">A <see cref="T:System.Uri"/> containing the URI to download.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
            <remarks>This method retrieves the specified resource using the GET method.
            The resource is downloaded asynchronously using thread resources that are automatically allocated from the thread pool.
            <para>After downloading the resource, this method uses the encoding specified in the <see cref="P:InTheHand.Net.WebClient.Encoding"/> property to convert the resource to a <see cref="T:System.String"/>.
            This method does not block the calling thread while downloading the resource.
            To download a resource and block while waiting for the server's response, use the <see cref="M:InTheHand.Net.WebClient.DownloadString(System.String)"/> method.
            When the download completes, the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event is raised.
            Your application must handle this event to receive notification.
            The downloaded string is available in the <see cref="P:InTheHand.Net.DownloadStringCompletedEventArgs.Result"/> property.</para>
            <para>You can use the <see cref="M:InTheHand.Net.WebClient.CancelAsync"/> method to cancel asynchronous operations that have not completed.</para>
            <para>If the <see cref="P:InTheHand.Net.WebClient.BaseAddress"/> property is not an empty string ("") and address does not contain an absolute URI, address must be a relative URI that is combined with <see cref="P:InTheHand.Net.WebClient.BaseAddress"/> to form the absolute URI of the requested data.
            If the <see cref="P:InTheHand.Net.WebClient.QueryString"/> property is not an empty string, it is appended to address.</para>
            <para>This method uses the RETR command to download an FTP resource.
            For an HTTP resource, the GET method is used.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnDownloadStringCompleted(InTheHand.Net.DownloadStringCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.DownloadStringCompleted"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenRead(System.String)">
            <summary>
            Opens a readable stream for the data downloaded from a resource with the URI specified as a <see cref="T:System.String"/>.
            </summary>
            <param name="address">The URI specified as a <see cref="T:System.String"/> from which to download data.</param>
            <returns>A <see cref="T:System.IO.Stream"/> used to read data from a resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenRead(System.Uri)">
            <summary>
            Opens a readable stream for the data downloaded from a resource with the URI specified as a <see cref="T:System.Uri"/>.
            </summary>
            <param name="address">The URI specified as a <see cref="T:System.Uri"/> from which to download data. </param>
            <returns>A <see cref="T:System.IO.Stream"/> used to read data from a resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenWrite(System.String)">
            <summary>
            Opens a stream for writing data to the specified resource.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <returns>A <see cref="T:System.IO.Stream"/> used to write data to the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenWrite(System.Uri)">
            <summary>
            Opens a stream for writing data to the specified resource.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <returns>A <see cref="T:System.IO.Stream"/> used to write data to the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenWrite(System.String,System.String)">
            <summary>
            Opens a stream for writing data to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <returns>A <see cref="T:System.IO.Stream"/> used to write data to the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.OpenWrite(System.Uri,System.String)">
            <summary>
            Opens a stream for writing data to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <returns>A <see cref="T:System.IO.Stream"/> used to write data to the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadData(System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadData(System.Uri,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="data">The data buffer to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadData(System.String,System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The data buffer to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The data buffer to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="data">The data buffer to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])">
            <summary>
            Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The data buffer to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
            <summary>
            Uploads a data buffer to a resource identified by a URI, using the specified method and identifying token.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The data buffer to send to the resource.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFile(System.String,System.String)">
            <summary>
            Uploads the specified local file to a resource with the specified URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="fileName">The file to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
            <example>The following code example uploads the specified file to the specified URI using UploadFile. Any response returned by the server is displayed.
            <code>
            String uriString = "ftp://yoururihere";
            
            // Create a new WebClient instance. 
            WebClient myWebClient = new WebClient();
            
            string fileName = "\\yourfilepath.ext";
            MessageBox.Show("Uploading {0} to {1} ...",fileName,uriString);
            // Upload the file to the URI.
            // The 'UploadFile(uriString,fileName)' method implicitly uses HTTP POST or FTP STOR method.
            byte[] responseArray = myWebClient.UploadFile(uriString,fileName);
            // Decode and display the response.
            MessageBox.Show("\nResponse Received.The contents of the file uploaded are:\n{0}", System.Text.Encoding.ASCII.GetString(responseArray));
            </code></example>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFile(System.Uri,System.String)">
            <summary>
            Uploads the specified local file to a resource with the specified URI.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="fileName">The file to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFile(System.String,System.String,System.String)">
            <summary>
            Uploads the specified local file to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="fileName">The file to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFile(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified local file to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the data.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="fileName">The file to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFileAsync(System.Uri,System.String)">
            <summary>
            Uploads the specified local file to the specified resource, using the POST method.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="fileName">The file to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified local file to the specified resource, using the POST method.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="fileName">The file to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
            <summary>
            Uploads the specified local file to the specified resource, using the POST method.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="fileName">The file to send to the resource.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadString(System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource.
            </summary>
            <param name="address">The URI of the resource to receive the string.
            For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="data">The string to be uploaded.</param>
            <returns>A <see cref="T:System.String"/> containing the response sent by the server.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadString(System.Uri,System.String)">
            <summary>
            Uploads the specified string to the specified resource.
            </summary>
            <param name="address">The URI of the resource to receive the string.
            For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="data">The string to be uploaded.</param>
            <returns>A <see cref="T:System.String"/> containing the response sent by the server.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadString(System.String,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the string.
            For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The string to be uploaded.</param>
            <returns>A <see cref="T:System.String"/> containing the response sent by the server.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadString(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the string.
            For Http resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.</param>
            <param name="method">The HTTP method used to send the data to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The string to be uploaded.</param>
            <returns>A <see cref="T:System.String"/> containing the response sent by the server.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
            <summary>
            Uploads the specified string to the specified resource.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="data">The string to be uploaded.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
            <summary>
            Uploads the specified string to the specified resource.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The string to be uploaded.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
            <summary>
            Uploads the specified string to the specified resource.
            This method does not block the calling thread.
            </summary>
            <param name="address">The URI of the resource to receive the file.
            For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. </param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The string to be uploaded.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the specified name/value collection to the resource identified by the specified URI.
            </summary>
            <param name="address">The URI of the resource to receive the collection.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the specified name/value collection to the resource identified by the specified URI.
            </summary>
            <param name="address">The URI of the resource to receive the collection.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the collection.</param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the specified name/value collection to the resource identified by the specified URI, using the specified method.
            </summary>
            <param name="address">The URI of the resource to receive the collection.</param>
            <param name="method">The HTTP method used to send the file to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
            <returns>A <see cref="T:System.Byte"/> array containing the body of the response from the resource.</returns>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method.
            This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.
            </summary>
            <param name="address">The URI of the resource to receive the collection.
            This URI must identify a resource that can accept a request sent with the method method.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method.
            This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.
            </summary>
            <param name="address">The URI of the resource to receive the collection.
            This URI must identify a resource that can accept a request sent with the method method.</param>
            <param name="method">The HTTP method used to send the string to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            Uploads the data in the specified name/value collection to the resource identified by the specified URI, using the specified method.
            This method does not block the calling thread, and allows the caller to pass an object to the method that is invoked when the operation completes.
            </summary>
            <param name="address">The URI of the resource to receive the collection.
            This URI must identify a resource that can accept a request sent with the method method.</param>
            <param name="method">The HTTP method used to send the string to the resource.
            If null, the default is POST for http and STOR for ftp.</param>
            <param name="data">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to send to the resource.</param>
            <param name="userToken">A user-defined object that is passed to the method invoked when the asynchronous operation completes.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnDownloadProgressChanged(InTheHand.Net.DownloadProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.DownloadProgressChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnUploadProgressChanged(InTheHand.Net.UploadProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.UploadProgressChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnUploadDataCompleted(InTheHand.Net.UploadDataCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.UploadDataCompleted"/> event.
            </summary>
            <param name="e">An <see cref="T:InTheHand.Net.UploadDataCompletedEventArgs"/> object containing event data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnUploadFileCompleted(InTheHand.Net.UploadFileCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.UploadFileCompleted"/> event.
            </summary>
            <param name="e">An <see cref="T:InTheHand.Net.UploadFileCompletedEventArgs"/> object containing event data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnUploadStringCompleted(InTheHand.Net.UploadStringCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.UploadStringCompleted"/> event.
            </summary>
            <param name="e">An <see cref="T:InTheHand.Net.UploadStringCompletedEventArgs"/> object containing event data.</param>
        </member>
        <member name="M:InTheHand.Net.WebClient.OnUploadValuesCompleted(InTheHand.Net.UploadValuesCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:InTheHand.Net.WebClient.UploadValuesCompleted"/> event.
            </summary>
            <param name="e">A <see cref="T:InTheHand.Net.UploadValuesCompletedEventArgs"/> object containing event data.</param>
        </member>
        <member name="P:InTheHand.Net.WebClient.BaseAddress">
            <summary>
            Gets or sets the base URI for requests made by a <see cref="T:InTheHand.Net.WebClient"/>.
            </summary>
            <value>A <see cref="T:System.String"/> containing the base URI for requests made by a <see cref="T:InTheHand.Net.WebClient"/> or <see cref="F:System.String.Empty"/> if no base address has been specified.</value>
            <exception cref="T:System.ArgumentException">BaseAddress is set to an invalid URI.
            The inner exception may contain information that will help you locate the error.</exception>
            <remarks>The BaseAddress property contains a base URI that is combined with a relative address.
            When you call a method that uploads or downloads data, the WebClient object combines this base URI with the relative address you specify in the method call.
            If you specify an absolute URI, WebClient does not use the BaseAddress property value.
            To remove a previously set value, set this property to a null reference (Nothing in Visual Basic) or an empty string ("").</remarks>
        </member>
        <member name="P:InTheHand.Net.WebClient.Credentials">
            <summary>
            Gets or sets the network credentials that are sent to the host and used to authenticate the request.
            </summary>
        </member>
        <member name="P:InTheHand.Net.WebClient.UseDefaultCredentials">
            <summary>
            Gets or sets a Boolean value that controls whether the <see cref="P:System.Net.CredentialCache.DefaultCredentials"/> are sent with requests.
            </summary>
        </member>
        <member name="P:InTheHand.Net.WebClient.Encoding">
            <summary>
            Gets and sets the <see cref="T:System.Text.Encoding"/> used to upload and download strings. 
            </summary>
        </member>
        <member name="P:InTheHand.Net.WebClient.Headers">
            <summary>
            Gets or sets a collection of header name/value pairs associated with the request.
            </summary>
            <value>A <see cref="T:System.Net.WebHeaderCollection"/> containing header name/value pairs associated with this request.</value>
            <remarks>The <see cref="P:InTheHand.Net.WebClient.Headers"/> property contains a <see cref="T:System.Net.WebHeaderCollection"/> instance containing header information that the <see cref="T:InTheHand.Net.WebClient"/> sends with the request.
            This is an unrestricted collection of headers, so setting headers that are restricted by <see cref="T:System.Net.WebRequest"/> descendants such as <see cref="T:System.Net.HttpWebRequest"/> is allowed.</remarks>
        </member>
        <member name="P:InTheHand.Net.WebClient.IsBusy">
            <summary>
            Gets whether a Web request is in progress.
            </summary>
            <value>true if the Web request is still in progress; otherwise false.</value>
        </member>
        <member name="P:InTheHand.Net.WebClient.Proxy">
            <summary>
            Gets or sets the proxy used by this <see cref="T:InTheHand.Net.WebClient"/> object.
            </summary>
            <value>An <see cref="T:System.Net.IWebProxy"/> instance used to send requests.</value>
            <remarks>The Proxy property identifies the <see cref="T:System.Net.IWebProxy"/> instance that communicates with remote servers on behalf of this <see cref="T:InTheHand.Net.WebClient"/> object.
            The proxy is set by the system using configuration files and the Internet Explorer Mobile Local Area Network settings.
            To specify that no proxy should be used, set the Proxy property to the proxy instance returned by the <see cref="M:System.Net.GlobalProxySelection.GetEmptyWebProxy"/> method.</remarks>
        </member>
        <member name="P:InTheHand.Net.WebClient.QueryString">
            <summary>
            Gets or sets a collection of query name/value pairs associated with the request.
            </summary>
            <value>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains query name/value pairs associated with the request.
            If no pairs are associated with the request, the value is an empty <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</value>
        </member>
        <member name="E:InTheHand.Net.WebClient.DownloadDataCompleted">
            <summary>
            Occurs when an asynchronous data download operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.DownloadFileCompleted">
            <summary>
            Occurs when an asynchronous file download operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.DownloadStringCompleted">
            <summary>
            Occurs when an asynchronous resource-download operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.DownloadProgressChanged">
            <summary>
            Occurs when an asynchronous download operation successfully transfers some or all of the data.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.UploadProgressChanged">
            <summary>
            Occurs when an asynchronous upload operation successfully transfers some or all of the data.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.UploadDataCompleted">
            <summary>
            Occurs when an asynchronous data-upload operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.UploadFileCompleted">
            <summary>
            Occurs when an asynchronous file-upload operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.UploadStringCompleted">
            <summary>
            Occurs when an asynchronous string-upload operation completes.
            </summary>
        </member>
        <member name="E:InTheHand.Net.WebClient.UploadValuesCompleted">
            <summary>
            Occurs when an asynchronous upload of a name/value collection completes.
            </summary>
        </member>
        <member name="T:InTheHand.Net.FtpWebResponse">
            <summary>
            Encapsulates a File Transfer Protocol (FTP) server's response to a request.
            </summary>
            <remarks>Instances of <see cref="T:InTheHand.Net.FtpWebResponse"/> are obtained by calling the <see cref="M:InTheHand.Net.FtpWebRequest.GetResponse"/> method.
            The returned object must be cast to an <see cref="T:InTheHand.Net.FtpWebResponse"/>. 
            When your application no longer needs the <see cref="T:InTheHand.Net.FtpWebResponse"/> object, call the <see cref="M:InTheHand.Net.FtpWebResponse.Close"/> method to free the resources held by the <see cref="T:InTheHand.Net.FtpWebResponse"/>.
            <para>The <see cref="P:InTheHand.Net.FtpWebResponse.StatusCode"/> property contains the status code returned by the server, and the <see cref="P:InTheHand.Net.FtpWebResponse.StatusDescription"/> property returns the status code and a message that describes the status. 
            The values returned by these properties change as the messages are returned by the server.</para>
            <para>Any data returned by the request, such as the list of file names returned for a <see cref="F:InTheHand.Net.WebRequestMethods.Ftp.ListDirectory"/> request, is available in the stream returned by the <see cref="M:InTheHand.Net.FtpWebResponse.GetResponseStream"/> method.
            The length of the stream data can be obtained from the <see cref="P:InTheHand.Net.FtpWebResponse.ContentLength"/> property.</para></remarks>
        </member>
        <member name="M:InTheHand.Net.FtpWebResponse.GetResponseStream">
            <summary>
            Retrieves the stream that contains response data sent from an FTP server.
            </summary>
            <returns>A readable <see cref="T:System.IO.Stream"/> instance that contains data returned with the response; otherwise, Null if no response data was returned by the server.</returns>
        </member>
        <member name="M:InTheHand.Net.FtpWebResponse.Close">
            <summary>
            Frees the resources held by the response.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebResponse.StatusCode">
            <summary>
            Gets the most recent status code sent from the FTP server.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebResponse.StatusDescription">
            <summary>
            Gets text that describes a status code sent from the FTP server.
            </summary>
            <value>A <see cref="T:System.String"/> instance that contains the status code and message returned with this response.</value>
        </member>
        <member name="P:InTheHand.Net.FtpWebResponse.ContentLength">
            <summary>
            Gets the length of the data received from the FTP server.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebResponse.LastModified">
            <summary>
            Gets the date and time that a file on an FTP server was last modified.
            </summary>
        </member>
        <member name="P:InTheHand.Net.FtpWebResponse.ResponseUri">
            <summary>
            Gets the URI that sent the response to the request.
            </summary>
        </member>
        <member name="T:InTheHand.Net.FtpStatusCode">
            <summary>
            Specifies the status codes returned for a File Transfer Protocol (FTP) operation.
            </summary>
            <remarks><para>Equivalent to System.Net.FtpStatusCode</para>
            The <see cref="T:InTheHand.Net.FtpStatusCode"/> enumeration defines the values returned in the <see cref="P:InTheHand.Net.FtpWebResponse.StatusCode"/> property.
            <para>For additional information about FTP server status codes, see RFC 959, "File Transfer Protocol," Section 4.2, "FTP Replies," available at <a href="http://www.rfc-editor.org">http://www.rfc-editor.org</a>.</para></remarks>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.AccountNeeded">
            <summary>
            Specifies that a user account on the server is required.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionAbortedLocalProcessingError">
            <summary>
            Specifies that an error occurred that prevented the request action from completing.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionAbortedUnknownPageType">
            <summary>
            Specifies that the requested action cannot be taken because the specified page type is unknown.
            Page types are described in RFC 959 Section 3.1.2.3
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionNotTakenFilenameNotAllowed">
            <summary>
            Specifies that the requested action cannot be performed on the specified file.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionNotTakenFileUnavailable">
            <summary>
            Specifies that the requested action cannot be performed on the specified file because the file is not available.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionNotTakenFileUnavailableOrBusy">
            <summary>
            Specifies that the requested action cannot be performed on the specified file because the file is not available or is being used.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ActionNotTakenInsufficientSpace">
            <summary>
            Specifies that the requested action cannot be performed because there is not enough space on the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ArgumentSyntaxError">
            <summary>
            Specifies that one or more command arguments has a syntax error.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.BadCommandSequence">
            <summary>
            Specifies that the sequence of commands is not in the correct order.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.CantOpenData">
            <summary>
            Specifies that the data connection cannot be opened.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ClosingControl">
            <summary>
            Specifies that the server is closing the control connection.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ClosingData">
            <summary>
            Specifies that the server is closing the data connection and that the requested file action was successful.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.CommandExtraneous">
            <summary>
            Specifies that the command is not implemented by the server because it is not needed.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.CommandNotImplemented">
            <summary>
            Specifies that the command is not implemented by the FTP server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.CommandOK">
            <summary>
            Specifies that the command completed successfully.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.CommandSyntaxError">
            <summary>
            Specifies that the command has a syntax error or is not a command recognized by the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ConnectionClosed">
            <summary>
            Specifies that the connection has been closed.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.DataAlreadyOpen">
            <summary>
            Specifies that the data connection is already open and the requested transfer is starting.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.DirectoryStatus">
            <summary>
            Specifies the status of a directory.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.EnteringPassive">
            <summary>
            Specifies that the server is entering passive mode.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.FileActionAborted">
            <summary>
            Specifies that the requested action cannot be performed.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.FileActionOK">
            <summary>
            Specifies that the requested file action completed successfully.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.FileCommandPending">
            <summary>
            Specifies that the requested file action requires additional information.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.FileStatus">
            <summary>
            Specifies the status of a file.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.LoggedInProceed">
            <summary>
            Specifies that the user is logged in and can send commands.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.NeedLoginAccount">
            <summary>
            Specifies that the server requires a login account to be supplied.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.NotLoggedIn">
            <summary>
            Specifies that login information must be sent to the server.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.OpeningData">
            <summary>
            Specifies that the server is opening the data connection.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.PathnameCreated">
            <summary>
            Specifies that the requested path name was created.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.RestartMarker">
            <summary>
            Specifies that the response contains a restart marker reply.
            The text of the description that accompanies this status contains the user data stream marker and the server marker.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.SendPasswordCommand">
            <summary>
            Specifies that the server expects a password to be supplied.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.SendUserCommand">
            <summary>
            Specifies that the server is ready for a user login operation.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ServerWantsSecureSession">
            <summary>
            Specifies that the server accepts the authentication mechanism specified by the client, and the exchange of security data is complete.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ServiceNotAvailable">
            <summary>
            Specifies that the service is not available.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.ServiceTemporarilyNotAvailable">
            <summary>
            Specifies that the service is not available now; try your request later.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.SystemType">
            <summary>
            Specifies the system type name using the system names published in the Assigned Numbers document published by the Internet Assigned Numbers Authority.
            </summary>
        </member>
        <member name="F:InTheHand.Net.FtpStatusCode.Undefined">
            <summary>
            Included for completeness, this value is never returned by servers.
            </summary>
        </member>
    </members>
</doc>
