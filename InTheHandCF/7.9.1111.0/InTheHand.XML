<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand</name>
    </assembly>
    <members>
        <member name="T:InTheHand.DateTimeOffset">
            <summary>
            Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="F:InTheHand.DateTimeOffset.MinValue">
            <summary>
            Represents the earliest possible DateTimeOffset value.
            </summary>
        </member>
        <member name="F:InTheHand.DateTimeOffset.MaxValue">
            <summary>
            Represents the greatest possible value of DateTimeOffset.
            </summary>
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified <see cref="P:InTheHand.DateTimeOffset.DateTime"/> value.
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified DateTime value and offset.
            </summary>
            <param name="dateTime">A date and time.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified number of ticks and offset.
            </summary>
            <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified year, month, day, hour, minute, second and offset.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>    
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified year, month, day, hour, minute, second, millisecond, and offset.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>    
        </member>
        <member name="M:InTheHand.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
            <summary>
            Initializes a new instance of the DateTimeOffset structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999</param>
            <param name="calendar">The calendar whose time is defined.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Add(System.TimeSpan)">
            <summary>
            Adds a specified time interval to a DateTimeOffset object.
            </summary>
            <param name="timeSpan">A TimeSpan object that represents a positive or a negative time interval.</param>
            <returns>A DateTimeOffset object whose value is the sum of the date and time represented by the current DateTimeOffset object and the time interval represented by timeSpan.</returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddDays(System.Double)">
            <summary>
            Adds a specified number of whole and fractional days to the current DateTimeOffset object.
            </summary>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddHours(System.Double)">
            <summary>
            Adds a specified number of whole and fractional hours to the current DateTimeOffset object.
            </summary>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddMilliseconds(System.Double)">
            <summary>
            Adds a specified number of milliseconds to the current DateTimeOffset object.
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddMinutes(System.Double)">
            <summary>
            Adds a specified number of whole and fractional minutes to the current DateTimeOffset object.
            </summary>
            <param name="minutes"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddMonths(System.Int32)">
            <summary>
            Adds a specified number of months to the current DateTimeOffset object.
            </summary>
            <param name="months"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddSeconds(System.Double)">
            <summary>
            Adds a specified number of whole and fractional seconds to the current DateTimeOffset object.
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddTicks(System.Int64)">
            <summary>
            Adds a specified number of whole and fractional seconds to the current DateTimeOffset object.
            </summary>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.AddYears(System.Int32)">
            <summary>
            Adds a specified number of years to the DateTimeOffset object.
            </summary>
            <param name="years"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Compare(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            Compares two DateTimeOffset objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.CompareTo(InTheHand.DateTimeOffset)">
            <summary>
            Compares the current DateTimeOffset object to a specified DateTimeOffset object and indicates whether the current object is earlier than, the same as, or later than the second DateTimeOffset object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Equals(InTheHand.DateTimeOffset)">
            <summary>
            Determines whether the current DateTimeOffset object represents the same point in time as a specified DateTimeOffset object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Equals(System.Object)">
            <summary>
            Determines whether a DateTimeOffset object represents the same point in time as a specified object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Equals(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            Determines whether two specified DateTimeOffset objects represent the same point in time.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.EqualsExact(InTheHand.DateTimeOffset)">
            <summary>
            Determines whether the current DateTimeOffset object represents the same time and has the same offset as a specified DateTimeOffset object.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.FromFileTime(System.Int64)">
            <summary>
            Converts the specified Windows file time to an equivalent local time.
            </summary>
            <param name="fileTime"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.GetHashCode">
            <summary>
            Returns the hash code for the current DateTimeOffset object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Addition(InTheHand.DateTimeOffset,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="dateTimeTz"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Equality(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_GreaterThan(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_GreaterThanOrEqual(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Implicit(System.DateTime)~InTheHand.DateTimeOffset">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Inequality(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_LessThan(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_LessThanOrEqual(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Subtraction(InTheHand.DateTimeOffset,InTheHand.DateTimeOffset)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.op_Subtraction(InTheHand.DateTimeOffset,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="dateTimeTz"></param>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its DateTimeOffset equivalent.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="formatProvider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="format"></param>
            <param name="formatProvider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="formats"></param>
            <param name="formatProvider"></param>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Subtract(InTheHand.DateTimeOffset)">
            <summary>
            Subtracts a DateTimeOffset value that represents a specific date and time from the current DateTimeOffset object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.Subtract(System.TimeSpan)">
            <summary>
            Subtracts a specified time interval from the current DateTimeOffset object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the value of the current DateTimeOffset object with another object of the same type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ToFileTime">
            <summary>
            Converts the value of the current DateTimeOffset object to a Windows file time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ToLocalTime">
            <summary>
            Converts the current DateTimeOffset object to a DateTimeOffset object that represents the local time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ToOffset(System.TimeSpan)">
            <summary>
            Converts the value of the current DateTimeOffset object to the date and time specified by an offset value.
            </summary>
            <param name="offset">The offset to convert the DateTimeOffset value to.</param>
            <returns>A DateTimeOffset object that is equal to the original DateTimeOffset object (that is, their ToUniversalTime methods return identical points in time) but whose Offset property is set to offset.</returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ToString">
            <summary>
            Converts the value of the current DateTimeOffset object to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InTheHand.DateTimeOffset.ToUniversalTime">
            <summary>
            Converts the current DateTimeOffset object to a DateTimeOffset value that represents the Coordinated Universal Time (UTC).
            </summary>
            <returns>A DateTimeOffset object that represents the date and time of the current DateTimeOffset object converted to Coordinated Universal Time (UTC).</returns>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Date">
            <summary>
            Gets a DateTime value that represents the date component of the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.DateTime">
            <summary>
            Gets a DateTime value that represents the date and time of the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Day">
            <summary>
            Gets the day of the month represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.DayOfWeek">
            <summary>
            Gets the day of the week represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.DayOfYear">
            <summary>
            Gets the day of the year represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Hour">
            <summary>
            Gets the hour component of the time represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.LocalDateTime">
            <summary>
            Gets a DateTime value that represents the local date and time of the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Millisecond">
            <summary>
            Gets the millisecond component of the time represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Minute">
            <summary>
            Gets the minute component of the time represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Month">
            <summary>
            Gets the month component of the date represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Now">
            <summary>
            Gets a DateTimeOffset object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Offset">
            <summary>
            Gets the time's offset from Coordinated Universal Time (UTC). 
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Second">
            <summary>
            Gets the second component of the clock time represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Ticks">
            <summary>
            Gets the number of ticks that represents the date and time of the current DateTimeOffset object in clock time.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.TimeOfDay">
            <summary>
            Gets the time of day for the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.UtcDateTime">
            <summary>
            Gets a DateTime value that represents the Coordinated Universal Time (UTC) date and time of the current DateTimeOffset object.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.UtcNow">
            <summary>
            Gets a DateTimeOffset object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is TimeSpan.Zero.
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.UtcTicks">
            <summary>
            Gets the number of ticks that represents the date and time of the current DateTimeOffset object in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:InTheHand.DateTimeOffset.Year">
            <summary>
            Gets the year component of the date represented by the current DateTimeOffset object.
            </summary>
        </member>
        <member name="T:InTheHand.EnvironmentInTheHand">
            <summary>
            Extends the functionality of <see cref="T:System.Environment"/>
            </summary>
            <seealso cref="T:System.Environment"/>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.MaxPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:InTheHand.EnvironmentInTheHand.GetFolderPath(InTheHand.EnvironmentInTheHand.SpecialFolder)">
            <summary>
            Gets the path to the system special folder identified by the specified enumeration.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").
            A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
            <seealso cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">System.Environment.GetFolderPath Method</seealso>
        </member>
        <member name="M:InTheHand.EnvironmentInTheHand.GetLogicalDrives">
            <summary>
            Returns an array of string containing the names of the logical drives on the current computer.
            </summary>
            <returns>An array of string where each element contains the name of a logical drive.</returns>
            <example>The following example shows how to display the logical drives of the current computer using the GetLogicalDrives method.
            <code lang="vb">
            ' Sample for the EnvironmentHelper.GetLogicalDrives method
            Imports System
            Imports InTheHand
            
            Class Sample
                Public Shared Sub Main()
                    System.Diagnostics.Debug.WriteLine()
                    Dim drives As [String]() = EnvironmentHelper.GetLogicalDrives()
                    System.Diagnostics.Debug.WriteLine("GetLogicalDrives: {0}", [String].Join(", ", drives))
                End Sub 'Main
            End Class 'Sample
            '
            'This example produces the following results:
            '
            'GetLogicalDrives: \, Storage Card
            '
            </code>
            <code lang="cs">
            // Sample for the EnvironmentHelper.GetLogicalDrives method
            using System;
            using InTheHand;
            
            class Sample 
            {
                public static void Main() 
                {
                    System.Diagnostics.Debug.WriteLine();
                    String[] drives = EnvironmentHelper.GetLogicalDrives();
                    System.Diagnostics.Debug.WriteLine("GetLogicalDrives: {0}", String.Join(", ", drives));
                }
            }
            /*
            This example produces the following results:
            
            GetLogicalDrives: \, Storage Card
            */
            </code>
            </example>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.NewLine">
            <summary>
            Gets the newline string defined for this environment.
            </summary>
            <value>A string containing "\r\n".</value>
            <remarks>The property value is a constant customized specifically for the current platform.
            This value is automatically appended to text when using WriteLine methods, such as <see cref="M:T:System.Console.WriteLine(System.String)">Console.WriteLine</see>.</remarks>
            <seealso cref="P:System.Environment.NewLine"/>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.CurrentDirectory">
            <summary>
            Gets the fully qualified path of the current working directory.
            </summary>
            <value>A string containing a directory path.</value>
            <remarks>Under the .NET Compact Framework this value is read-only and determined from the path of the entry assembly</remarks>
            <seealso cref="M:InTheHand.Reflection.AssemblyInTheHand.GetEntryAssembly"/>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.SystemDirectory">
            <summary>
            Gets the fully qualified path of the system directory.
            </summary>
            <value>A string containing a directory path.</value>
            <remarks>An example of the value returned is the string "\Windows".</remarks>
            <seealso cref="P:System.Environment.SystemDirectory">System.Environment.SystemDirectory Property</seealso>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.MachineName">
            <summary>
            Gets the name of this local device.
            </summary>
            <value>A string containing the name of this computer.</value>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.UserName">
            <summary>
            Gets the user name of the person who started the current thread.
            </summary>
            <remarks>Supported only on Windows Mobile platforms.</remarks>
        </member>
        <member name="P:InTheHand.EnvironmentInTheHand.StackTrace">
            <summary>
            Gets current stack trace information.
            </summary>
            <value>A <see cref="T:System.String"/> containing stack trace information.
            This value can be <see cref="F:System.String.Empty"/>.</value>
            <remarks>Equivalent to System.Environment.StackTrace</remarks>
            <seealso cref="T:System.Environment"/>
        </member>
        <member name="T:InTheHand.EnvironmentInTheHand.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
            <remarks>Not all platforms support all of these constants.</remarks>
            <seealso cref="T:System.Environment.SpecialFolder">System.Environment.SpecialFolder Enumeration</seealso>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Desktop">
            <summary>
            The logical Desktop rather than the physical file system location. 
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Programs">
            <summary>
            The directory that contains the user's program groups.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Personal">
            <summary>
            The directory that serves as a common repository for documents.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.MyDocuments">
            <summary>
            The "My Documents" folder.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Favorites">
            <summary>
            The directory that serves as a common repository for the user's favorite items.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Startup">
            <summary>
            The directory that corresponds to the user's Startup program group.
            The system starts these programs whenever a user starts Windows CE.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Recent">
            <summary>
            The directory that contains the user's most recently used documents.
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.SendTo">
            <summary>
            The directory that contains the Send To menu items.
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.StartMenu">
            <summary>
            The directory that contains the Start menu items.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.MyMusic">
            <summary>
            The "My Music" folder.
            <para><b>Requires Windows Mobile</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.MyVideo">
            <summary>
            The file system directory that serves as a repository for videos that belong to a user.
            <para><b>Requires Windows Mobile</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.DesktopDirectory">
            <summary>
            The directory used to physically store file objects on the desktop.
            Do not confuse this directory with the desktop folder itself, which is a virtual folder.
            <para><b>Not supported in Windows Mobile.</b></para>
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Fonts">
            <summary>
            The Fonts folder.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.ApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific data for the current user.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.Windows">
            <summary>
            The Windows folder.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.ProgramFiles">
            <summary>
            The program files directory.
            </summary>
        </member>
        <member name="F:InTheHand.EnvironmentInTheHand.SpecialFolder.MyPictures">
            <summary>
            The "My Pictures" folder.
            <para><b>Requires Windows Mobile</b></para> 
            </summary>
        </member>
        <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
            <summary>
            Notifies listeners of dynamic changes, such as when items get added and removed or the whole list is refreshed.
            </summary>
            <remarks>You can enumerate over any collection that implements the <see cref="T:System.Collections.IEnumerable"/> interface.
            However, to set up dynamic bindings so that insertions or deletions in the collection update the UI automatically, the collection must implement the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            This interface exposes the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event that must be raised whenever the underlying collection changes.</remarks>
        </member>
        <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
            <remarks>The event handler receives an argument of type <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/>,which contains data that is related to this event.</remarks>
        </member>
        <member name="T:InTheHand.Threading.EventWaitHandle">
            <summary>
            Represents a thread synchronization event.
            </summary>
            <remarks>The <see cref="T:InTheHand.Threading.EventWaitHandle"/> class allows threads to communicate with each other by signaling.
            Typically, one or more threads block on an <see cref="T:InTheHand.Threading.EventWaitHandle"/> until an unblocked thread calls the <see cref="M:InTheHand.Threading.EventWaitHandle.Set"/> method, releasing one or more of the blocked threads.</remarks>
        </member>
        <member name="F:InTheHand.Threading.EventWaitHandle.WaitTimeout">
            <summary>
            Indicates that a <see cref="M:InTheHand.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[])"/> operation timed out before any of the wait handles were signaled.
            </summary>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.OpenExisting(System.String)">
            <summary>
            Opens an existing named synchronization event.
            </summary>
            <param name="name">The name of a system event.</param>
            <returns>A <see cref="T:InTheHand.Threading.EventWaitHandle"/> object that represents the named system event.</returns>
            <exception cref="T:System.ArgumentException">name is an empty string. 
            -or-
            name is longer than 260 characters.</exception>
            <exception cref="T:System.ArgumentNullException">name is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:InTheHand.Threading.WaitHandleCannotBeOpenedException">The named system event does not exist.</exception>
            <remarks>The OpenExisting method attempts to open an existing named system event.
            If the system event does not exist, this method throws an exception instead of creating the system event.
            Two calls to this method with the same value for name do not return the same <see cref="T:InTheHand.Threading.EventWaitHandle"/> object, even though they represent the same named system event.</remarks>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.Reset">
            <summary>
            Sets the state of the event to nonsignaled, causing threads to block.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.Set">
            <summary>
            Sets the state of the event to signaled, allowing one or more waiting threads to proceed.
            </summary>
            <returns>true if the function succeeds; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
            <summary>
            Initializes a newly created <see cref="T:InTheHand.Threading.EventWaitHandle"/> object, specifying whether the wait 
            handle is initially signaled, and whether it resets automatically or manually.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An EventResetMode value that determines whether the event resets automatically or manually.</param>
            <remarks>If name is a null reference (Nothing in Visual Basic) or an empty string, a local <see cref="T:InTheHand.Threading.EventWaitHandle"/> is created.
            If a system event with the name specified for the name parameter already exists, the initialState parameter is ignored.</remarks>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
            <summary>
            Initializes a newly created <see cref="T:InTheHand.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, and the name of a system synchronization event.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An <see cref="T:System.Threading.EventResetMode"/> value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
            <remarks>If name is a null reference (Nothing in Visual Basic) or an empty string, a local <see cref="T:InTheHand.Threading.EventWaitHandle"/> is created.
            If a system event with the name specified for the name parameter already exists, the initialState parameter is ignored.</remarks>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
            <summary>
            Initializes a newly created <see cref="T:InTheHand.Threading.EventWaitHandle"/> object, specifying whether the wait handle is initially signaled, whether it resets automatically or manually, the name of a system synchronization event, and a bool variable whose value after the call indicates whether the named system event was created.
            </summary>
            <param name="initialState">true to set the initial state to signaled, false to set it to nonsignaled.</param>
            <param name="mode">An <see cref="T:System.Threading.EventResetMode"/> value that determines whether the event resets automatically or manually.</param>
            <param name="name">The name of a system-wide synchronization event.</param>
            <param name="createdNew">When this method returns, contains true if the calling thread was granted initial ownership of the named system event; otherwise, false. This parameter is passed uninitialized.</param>
            <remarks>If name is a null reference (Nothing in Visual Basic) or an empty string, a local <see cref="T:InTheHand.Threading.EventWaitHandle"/> is created.
            If a system event with the name specified for the name parameter already exists, the initialState parameter is ignored.</remarks>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[])">
            <summary>
            Waits for any of the elements in the specified array to receive a signal.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array containing the objects for which the current instance will wait.</param>
            <returns>The array index of the object that satisfied the wait.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
            <summary>
            Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to measure the time interval, and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="waitHandles">A <see cref="T:System.Threading.WaitHandle"/> array containing the objects for which the current instance will wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="exitContext">Not supported.</param>
            <returns>The array index of the object that satisfied the wait, or <see cref="F:InTheHand.Threading.EventWaitHandle.WaitTimeout"/> if no object satisfied the wait and a time interval equivalent to millisecondsTimeout has passed.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.WaitOne">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal.
            </summary>
            <returns>true if the current instance receives a signal. if the current instance is never signaled, <see cref="M:InTheHand.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)"/> never returns.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.WaitOne(System.Int32,System.Boolean)">
            <summary>
            Blocks the current thread until the current <see cref="T:System.Threading.WaitHandle"/> receives a signal, using 32-bit signed integer to measure the time interval and specifying whether to exit the synchronization domain before the wait.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite"/> (-1) to wait indefinitely.</param>
            <param name="exitContext">Not Supported - Just pass false.</param>
            <returns>true if the current instance receives a signal; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.Close">
            <summary>
            releases all resources held by the current <see cref="T:InTheHand.Threading.EventWaitHandle"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Threading.EventWaitHandle.Finalize">
            <summary>
            Allows an <see cref="T:InTheHand.Threading.EventWaitHandle"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:InTheHand.Threading.EventWaitHandle"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:InTheHand.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Arg_MustBeDateTimeOffset">
            <summary>
              Looks up a localized string similar to Object must be of type DateTimeOffset..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_ConflictingDateTimeRoundtripStyles">
            <summary>
              Looks up a localized string similar to The DateTimeStyles value RoundtripKind cannot be used with the values AssumeLocal, AssumeUniversal or AdjustToUniversal..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_ConflictingDateTimeStyles">
            <summary>
              Looks up a localized string similar to The DateTimeStyles values AssumeLocal and AssumeUniversal cannot be used together..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_DateTimeOffsetInvalidDateTimeStyles">
            <summary>
              Looks up a localized string similar to The DateTimeStyles value &apos;NoCurrentDateDefault&apos; is not allowed when parsing DateTimeOffset..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_InvalidDateTimeStyles">
            <summary>
              Looks up a localized string similar to An undefined DateTimeStyles value is being used..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_OffsetLocalMismatch">
            <summary>
              Looks up a localized string similar to The UTC Offset of the local dateTime parameter does not match the offset argument..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_OffsetOfFieldNotFound">
            <summary>
              Looks up a localized string similar to Field passed in is not a marshaled member of the type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_OffsetOutOfRange">
            <summary>
              Looks up a localized string similar to Offset must be within plus or minus 14 hours..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_OffsetPrecision">
            <summary>
              Looks up a localized string similar to Offset must be specified in whole minutes..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_OffsetUtcMismatch">
            <summary>
              Looks up a localized string similar to The UTC Offset for Utc DateTime instances must be 0..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_UTCOutOfRange">
            <summary>
              Looks up a localized string similar to The UTC time represented when the offset is applied must be between year 0 and 10,000..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Argument_WaitHandleNameTooLong">
            <summary>
              Looks up a localized string similar to The name can be no more than 260 characters in length..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.BackgroundWorker_WorkerAlreadyRunning">
            <summary>
              Looks up a localized string similar to This BackgroundWorker is currently busy and cannot run multiple tasks concurrently..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.BackgroundWorker_WorkerDoesntReportProgress">
            <summary>
              Looks up a localized string similar to This BackgroundWorker states that it doesn&apos;t report progress. Modify WorkerReportsProgress to state that it does report progress..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.BackgroundWorker_WorkerDoesntSupportCancellation">
            <summary>
              Looks up a localized string similar to This BackgroundWorker states that it doesn&apos;t support cancellation. Modify WorkerSupportsCancellation to state that it does support cancellation..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.IndexCannotBeNegative">
            <summary>
              Looks up a localized string similar to Index cannot be negative..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.IO_PathTooLong">
            <summary>
              Looks up a localized string similar to The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.MustBeResetAddOrRemoveActionForCtor">
            <summary>
              Looks up a localized string similar to Constructor only supports either a Reset, Add, or Remove action..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.NotSupported_ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.ObservableCollectionReentrancyNotAllowed">
            <summary>
              Looks up a localized string similar to Cannot change ObservableCollection during a CollectionChanged event..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.ProductName">
            <summary>
              Looks up a localized string similar to Windows Embedded API by In The Hand Ltd.
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.ResetActionRequiresIndexMinus1">
            <summary>
              Looks up a localized string similar to Reset action must be initialized with index -1..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.ResetActionRequiresNullItem">
            <summary>
              Looks up a localized string similar to Reset action must be initialized with no changed items..
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.Unknown_Error">
            <summary>
              Looks up a localized string similar to Unknown error (0x{0:x8}).
            </summary>
        </member>
        <member name="P:InTheHand.Properties.Resources.WrongActionForCtor">
            <summary>
              Looks up a localized string similar to Constructor supports only the &apos;{0}&apos; action..
            </summary>
        </member>
        <member name="T:InTheHand.Reflection.AssemblyInTheHand">
            <summary>
            Contains helper functions for the <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
            <seealso cref="T:System.Reflection.Assembly"/>
        </member>
        <member name="M:InTheHand.Reflection.AssemblyInTheHand.GetEntryAssembly">
            <summary>
            Gets the process executable.
            </summary>
            <returns>The <see cref="T:System.Reflection.Assembly"/> that is the process executable.</returns>
        </member>
        <member name="T:InTheHand.ComponentModel.Win32ExceptionInTheHand">
            <summary>
            Provides helper functions for the <see cref="T:System.ComponentModel.Win32Exception"/> class.
            </summary>
            <seealso cref="T:System.ComponentModel.Win32Exception"/>
        </member>
        <member name="M:InTheHand.ComponentModel.Win32ExceptionInTheHand.Create">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"/> class with the last Win32 error that occurred.
            The message is retrieved from the system where available.
            </summary>
            <returns>A <see cref="T:System.ComponentModel.Win32Exception"/> containing the error code and message.</returns>
            <remarks>The detailed description of the error is determined by the Win32 error message associated with the error.
            <para>This method uses the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> method of <see cref="T:System.Runtime.InteropServices.Marshal"/> to get its error code.</para></remarks>
            <example>The following code example shows how to replace regular <see cref="T:System.ComponentModel.Win32Exception"/> code with this helper method:-
            <code lang="cs">
            // throw new System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error());
            throw InTheHand.ComponentModel.Win32ExceptionHelper.Create();
            </code>
            <code lang="vbnet">
            ' Throw New System.ComponentModel.Win32Exception(Marshal.GetLastWin32Error())
            Throw InTheHand.ComponentModel.Win32ExceptionHelper.Create()
            </code></example>
        </member>
        <member name="M:InTheHand.ComponentModel.Win32ExceptionInTheHand.Create(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.Win32Exception"/> class with the specified error.
            The message is retrieved from the system where available.
            </summary>
            <param name="error">The Win32 error code associated with this exception.</param>
            <returns>A <see cref="T:System.ComponentModel.Win32Exception"/> containing the error code and message.</returns>
            <remarks>The detailed description of the error is determined by the Win32 error message associated with the error.</remarks>
            <example>The following code example shows how to replace regular <see cref="T:System.ComponentModel.Win32Exception"/> code with this helper method:-
            <code lang="cs">
            // throw new System.ComponentModel.Win32Exception(result);
            throw InTheHand.ComponentModel.Win32ExceptionHelper.Create(result);
            </code>
            <code lang="vbnet">
            ' Throw New System.ComponentModel.Win32Exception(result)
            Throw InTheHand.ComponentModel.Win32ExceptionHelper.Create(result)
            </code></example>
        </member>
        <member name="T:InTheHand.EnumInTheHand">
            <summary>
            Extends the functionality of <see cref="T:System.Enum"/>
            </summary>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Phone</term><description>Windows Phone 7</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE .NET 4.1 and later</description></item>
            </list></remarks>
        </member>
        <member name="M:InTheHand.EnumInTheHand.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An array that contains the values of the constants in enumType.
            The elements of the array are sorted by the binary values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentNullException">enumType is null.</exception>
            <exception cref="T:System.ArgumentException">enumType parameter is not an <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:InTheHand.EnumInTheHand.HasFlag(System.Enum,System.Enum)">
            <summary>
            Determines whether one or more bit fields are set in the current instance.
            </summary>
            <param name="theEnum">The <see cref="T:System.Enum"/> value.</param>
            <param name="flag">An enumeration value.</param>
            <returns>true if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false.</returns>
            <remarks>The <see cref="M:InTheHand.EnumInTheHand.HasFlag(System.Enum,System.Enum)"/> method returns the result of the following <see cref="T:System.Boolean"/> expression.
            <code lang="vbnet">thisInstance And flag = flag</code>
            If the underlying value of flag is zero, the method returns true.
            If this behavior is not desirable, you can use the <see cref="M:System.Enum.Equals(System.Object)"/> method to test for equality with zero and call <see cref="M:InTheHand.EnumInTheHand.HasFlag(System.Enum,System.Enum)"/> only if the underlying value of flag is non-zero.
            <para>The <see cref="M:InTheHand.EnumInTheHand.HasFlag(System.Enum,System.Enum)"/> method is designed to be used with enumeration types that are marked with the <see cref="T:System.FlagsAttribute"/> attribute.
            For enumeration types that are not marked with the <see cref="T:System.FlagsAttribute"/> attribute, call either the <see cref="M:System.Enum.Equals(System.Object)"/> method or the <see cref="M:System.Enum.CompareTo(System.Object)"/> method.
            </para>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Phone</term><description>Windows Phone 7 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE .NET 4.1 and later</description></item>
            </list></remarks>
            <exception cref="T:System.ArgumentException">flag is a different type than the current instance.</exception>
        </member>
        <member name="T:InTheHand.DecimalInTheHand">
            <summary>
            Provides helper methods to allow conversion of managed <see cref="T:System.Decimal"/> objects to and from their OLE Automation equivalents.
            </summary>
            <seealso cref="T:System.Decimal"/>
        </member>
        <member name="M:InTheHand.DecimalInTheHand.FromOACurrency(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer, which contains an OLE Automation Currency value, to the equivalent <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="cy">An OLE Automation Currency value</param>
            <returns>A <see cref="T:System.Decimal"/> that contains the equivalent of <paramref name="cy"/>.</returns>
        </member>
        <member name="M:InTheHand.DecimalInTheHand.ToOACurrency(System.Decimal)">
            <summary>
            Converts the specified <see cref="T:System.Decimal"/> value to the equivalent OLE Automation Currency value, which is contained in a 64-bit signed integer.
            </summary>
            <param name="value">A <see cref="T:System.Decimal"/> value</param>
            <returns>A 64-bit signed integer that contains the OLE Automation equivalent of value.</returns>
        </member>
        <member name="T:InTheHand.ComponentModel.ProgressChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:BackgroundWorker.ProgressChanged"/> event of the <see cref="!:BackgroundWorker"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.ComponentModel.ProgressChangedEventArgs"/> that contains the event data.</param>
            <remarks>When you create a ProgressChangedEventHandler delegate, you identify a method to handle the event.
            To associate the event with your event handler, add an instance of the delegate to the event.
            The event handler is called whenever the event occurs, unless you remove the delegate.</remarks>
            <example>The following code example shows how to use the ProgressChangedEventHandler class.
            This example is part of a larger example for the <see cref="!:BackgroundWorker"/> class.
            <code lang="vbnet">
            ' This event handler updates the progress bar.
            Private Sub backgroundWorker1_ProgressChanged( _
              ByVal sender As Object, ByVal e As ProgressChangedEventArgs) _
              Handles backgroundWorker1.ProgressChanged
            
                Me.progressBar1.Value = e.ProgressPercentage
            
            End Sub</code>
            <code lang="cs">
            // This event handler updates the progress bar.
            private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
            {
                this.progressBar1.Value = e.ProgressPercentage;
            }
            </code></example>
        </member>
        <member name="T:InTheHand.ComponentModel.ProgressChangedEventArgs">
            <summary>
            Provides data for the <see cref="!:BackgroundWorker.ProgressChanged"/> event.
            </summary>
            <example>The following code example shows how to use the ProgressChangedEventArgs class.
            This example is part of a larger example for the <see cref="!:BackgroundWorker"/> class.
            <code lang="vbnet">
            ' This event handler updates the progress bar.
            Private Sub backgroundWorker1_ProgressChanged( _
              ByVal sender As Object, ByVal e As ProgressChangedEventArgs) _
              Handles backgroundWorker1.ProgressChanged
            
                Me.progressBar1.Value = e.ProgressPercentage
            
            End Sub</code>
            <code lang="cs">
            // This event handler updates the progress bar.
            private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
            {
                this.progressBar1.Value = e.ProgressPercentage;
            }
            </code></example>
        </member>
        <member name="M:InTheHand.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.ComponentModel.ProgressChangedEventArgs"/> class.
            </summary>
            <param name="progressPercentage">The percentage of an asynchronous task that has been completed.</param>
            <param name="userState">A unique user state.</param>
        </member>
        <member name="P:InTheHand.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
            <summary>
            Gets the asynchronous task progress percentage.
            </summary>
            <value>A percentage value indicating the asynchronous task progress.</value>
            <remarks>The <b>ProgressPercentage</b> property determines what percentage of an asynchronous task has been completed.</remarks>
        </member>
        <member name="P:InTheHand.ComponentModel.ProgressChangedEventArgs.UserState">
            <summary>
            Gets a unique user state.
            </summary>
            <value>A unique <see cref="T:System.Object"/> indicating the user state.</value>
        </member>
        <member name="T:InTheHand.Threading.WaitHandleCannotBeOpenedException">
            <summary>
            The exception that is thrown when an attempt is made to open a system named sychronization event that does not exist.
            </summary>
            <remarks>Instances of the <see cref="T:InTheHand.Threading.EventWaitHandle"/> class can represent named system synchronization objects.
            When you use the <see cref="M:InTheHand.Threading.EventWaitHandle.OpenExisting(System.String)"/> method to open a named system object that does not exist, a WaitHandleCannotBeOpenedException is thrown.</remarks>
        </member>
        <member name="T:InTheHand.Runtime.InteropServices.MarshalInTheHand">
            <summary>
            Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.
            </summary>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.AllocHGlobal(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process using LocalAlloc.
            </summary>
            <param name="cb">The number of bytes in memory required.</param>
            <returns>An <see cref="T:System.IntPtr"/> to the newly allocated memory.
            This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"/> method.</returns>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.GetNativeVariantForObject(System.Object,System.IntPtr)">
            <summary>
            Converts an <see cref="T:System.Object">object</see> to a COM VARIANT.
            </summary>
            <param name="obj">The object for which to get a COM VARIANT.</param>
            <param name="pDstNativeVariant">An <see cref="T:System.IntPtr"/> to receive the VARIANT corresponding to the obj parameter.</param>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.GetObjectForNativeVariant(System.IntPtr)">
            <summary>
            Converts a COM VARIANT to an object.
            </summary>
            <param name="pSrcNativeVariant">An <see cref="T:System.IntPtr"/> containing a COM VARIANT.</param>
            <returns>An object corresponding to the <paramref name="pSrcNativeVariant"/> parameter.</returns>
            <exception cref="T:System.ArgumentException">pSrcNativeVariant is not a valid VARIANT type.</exception>
            <remarks>GetObjectForNativeVariant returns a managed object corresponding to a raw pointer to an unmanaged VARIANT type.
            GetObjectForNativeVariant provides the opposite functionality of <see cref="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)"/>.</remarks>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
            <summary>
            Converts an array of COM VARIANTs to an array of objects.
            </summary>
            <param name="aSrcNativeVariant">An <see cref="T:System.IntPtr"/> containing the first element of an array of COM VARIANTs.</param>
            <param name="cVars">The count of COM VARIANTs in aSrcNativeVariant.</param>
            <returns>An object array corresponding to aSrcNativeVariant.</returns>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.StringToHGlobalUni(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory.
            </summary>
            <param name="s">A managed string to be copied.</param>
            <returns>The address, in unmanaged memory, to where the s was copied, or 0 if null string was supplied.</returns>
            <remarks><b>StringToHGlobalUni</b> is useful for custom marshaling or for use when mixing managed and unmanaged code.
            Since this method allocates the unmanaged memory required for a string, always free the memory by calling <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"/>.
            This method provides the opposite functionality of <see cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)"/>.</remarks>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed String into unmanaged memory, converting into ANSI format as it copies.
            </summary>
            <param name="s">A managed string to be copied. </param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null string was supplied.</returns>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.GetHINSTANCE(System.Reflection.Module)">
            <summary>
            Returns the instance handle (HINSTANCE) for the specified module.
            </summary>
            <param name="m">The Module whose HINSTANCE is desired. </param>
            <returns>The HINSTANCE for m; -1 if the module does not have an HINSTANCE.</returns>
            <exception cref="T:System.ArgumentNullException">The m parameter is a null reference (Nothing in Visual Basic)</exception>
        </member>
        <member name="M:InTheHand.Runtime.InteropServices.MarshalInTheHand.GetHINSTANCE(System.String)">
            <summary>
            Returns the instance handle (HINSTANCE) for the specified module.
            </summary>
            <param name="path">The file path of the native dll.</param>
            <returns>The HINSTANCE for m; -1 if the module does not have an HINSTANCE.</returns>
            <exception cref="T:System.ArgumentNullException">The m parameter is a null reference (Nothing in Visual Basic)</exception>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
            <summary>
            Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">Type</typeparam>
            <remarks>This class is a read-only wrapper around an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/> class that serves as a wrapper around the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with which to create this instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/> class.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged"/> event using the provided arguments.
            </summary>
            <param name="args">Arguments of the event being raised.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged"/> event using the provided arguments.
            </summary>
            <param name="args">Arguments of the event being raised.</param>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when an item is added or removed.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:InTheHand.Collections.ArrayListInTheHand">
            <summary>
            Helper for <see cref="T:System.Collections.ArrayList"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Collections.ArrayListInTheHand.ReadOnly(System.Collections.IList)">
            <summary>
            Returns a read-only <see cref="T:System.Collections.IList"/> wrapper.
            </summary>
            <param name="list">The <see cref="T:System.Collections.IList"/> to wrap</param>
            <returns>A read-only <see cref="T:System.Collections.IList"/> wrapper around list.</returns>
        </member>
        <member name="T:InTheHand.Collections.ArrayListInTheHand.ReadOnlyList">
            <exclude/>
        </member>
        <member name="T:InTheHand.TypeInTheHand">
            <summary>
            Helper for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:InTheHand.TypeInTheHand.GetGUID(System.Type)">
            <summary>
            Gets the GUID associated with the Type.
            </summary>
            <param name="t">The <see cref="T:System.Type"/>.</param>
            <returns>The GUID associated with the <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:InTheHand.TypeInTheHand.GetInterface(System.Type,System.String)">
            <summary>
            Searches for the interface with the specified name.
            </summary>
            <param name="instance">The <see cref="T:System.Type"/>.</param>
            <param name="interfaceName">The String containing the name of the interface to get.
            For generic interfaces, this is the mangled name.</param>
            <returns>A <see cref="T:System.Type"/> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type"/>, if found; otherwise, a null reference (Nothing in Visual Basic).</returns>
            <remarks>The search for name is case-sensitive.</remarks>
        </member>
        <member name="M:InTheHand.TypeInTheHand.GetInterface(System.Type,System.String,System.Boolean)">
            <summary>
            Searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
            </summary>
            <param name="instance">The <see cref="T:System.Type"/>.</param>
            <param name="interfaceName">The <see cref="T:System.String"/> containing the name of the interface to get.
            For generic interfaces, this is the mangled name.</param>
            <param name="ignoreCase">true to ignore the case of that part of name that specifies the simple interface name (the part that specifies the namespace must be correctly cased).
            <para>-or-</para>
            false to perform a case-sensitive search for all parts of name.</param>
            <returns>A <see cref="T:System.Type"/> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type"/>, if found; otherwise, a null reference (Nothing in Visual Basic).</returns>
        </member>
        <member name="T:InTheHand.Globalization.TextInfoInTheHand">
            <summary>
            Helper class for TextInfo.
            </summary>
        </member>
        <member name="M:InTheHand.Globalization.TextInfoInTheHand.IsRightToLeft(System.Globalization.TextInfo)">
            <summary>
            Gets a value indicating whether the TextInfo object represents a writing system where text flows from right to left.
            </summary>
            <param name="textInfo">A TextInfo instance.</param>
            <returns>true if text flows from right to left; otherwise, false.</returns>
        </member>
        <member name="T:InTheHand.Text.EncodingInTheHand">
            <summary>
            Provides extension methods for <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Text.EncodingInTheHand.GetString(System.Text.Encoding,System.Byte[])">
            <summary>
            Decodes all the bytes in the specified byte array into a string
            </summary>
            <param name="e">The <see cref="T:System.Text.Encoding"/>.</param>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <returns>A <see cref="T:System.String"/> containing the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="T:InTheHand.StringInTheHand">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> type. 
            </summary>
        </member>
        <member name="M:InTheHand.StringInTheHand.ToUpperInvariant(System.String)">
            <summary>
            Returns a copy of the <see cref="T:System.String"/> object converted to uppercase using the casing rules of the invariant culture.
            </summary>
            <param name="instance">The <see cref="T:System.String"/> value.</param>
            <returns>A <see cref="T:System.String"/> object in uppercase.</returns>
            <remarks>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToUpperInvariant method.
            The ToUpperInvariant method is equivalent to <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)">ToUpper(CultureInfo.InvariantCulture)</see>.</remarks>
        </member>
        <member name="M:InTheHand.StringInTheHand.ToLowerInvariant(System.String)">
            <summary>
            Returns a copy of the <see cref="T:System.String"/> object converted to lowercase using the casing rules of the invariant culture.
            </summary>
            <param name="instance">The <see cref="T:System.String"/> value.</param>
            <returns>A <see cref="T:System.String"/> object in lowercase.</returns>
            <remarks>If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the ToLowerInvariant method.
            The ToLowerInvariant method is equivalent to <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)">ToLower(CultureInfo.InvariantCulture)</see>.</remarks>
        </member>
        <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
            <summary>
            Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">Type</typeparam>
            <remarks>You can enumerate over any collection that implements the IEnumerable interface.
            However, to set up dynamic bindings so that insertions or deletions in the collection update the UI automatically, the collection must implement the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            This interface exposes the CollectionChanged event, an event that should be raised whenever the underlying collection changes.
            <para>Mobile In The Hand provides the ObservableCollection(T) class, which is an implementation of a data collection that implements the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface.
            For .NET Compact Framework it also implements IBindingList to support UI changes in Windows Forms.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
            <remarks>The base class calls this method when the list is being cleared.
            This implementation raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event.
            <para>For more information, see the <see cref="M:System.Collections.ObjectModel.Collection`1.ClearItems"/> method of the <see cref="T:System.Collections.ObjectModel.Collection`1"/> base class.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
            <remarks>Subclasses can override the <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)"/> method to provide custom behavior for this method.</remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection.
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
            <remarks><para>This implementation raises the CollectionChanged event.</para>
            <para>Subclasses can override this protected method to provide custom behavior for the Move method.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event with the provided arguments.
            </summary>
            <param name="e">Arguments of the event being raised.</param>
            <remarks>Properties and methods that modify this collection raise the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event through this virtual method.</remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>The base class calls this method when an item is removed from the collection.
            This implementation raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event.
            <para>For more information, see the <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)"/> method of the <see cref="T:System.Collections.ObjectModel.Collection`1"/> base class.</para>
            </remarks>
        </member>
        <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
            <remarks>The base class calls this method when an item is set in the collection.
            This implementation raises the <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged"/> event.
            <para>For more information, see the <see cref="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)"/> method of the <see cref="T:System.Collections.ObjectModel.Collection`1"/> base class.</para>
            </remarks>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:InTheHand.WindowsCE.Forms.SystemSettingsInTheHand">
            <summary>
            Provides access to user interface and native Windows CE operating system settings on a device.
            </summary>
            <seealso cref="T:Microsoft.WindowsCE.Forms.SystemSettings"/>
        </member>
        <member name="P:InTheHand.WindowsCE.Forms.SystemSettingsInTheHand.Platform">
            <summary>
            Gets the well-known Windows CE based operating system of the device.
            </summary>
            <value>A <see cref="T:Microsoft.WindowsCE.Forms.WinCEPlatform"/> enumeration value that specifies the device platform.</value>
        </member>
        <member name="T:InTheHand.Threading.ThreadInTheHand">
            <summary>
            Provides helper functions for the <see cref="T:System.Threading.Thread"/> class.
            </summary>
            <seealso cref="T:System.Threading.Thread"/>
        </member>
        <member name="M:InTheHand.Threading.ThreadInTheHand.GetIsAlive(System.Threading.Thread)">
            <summary>
            Gets a value indicating the execution status of the specified thread.
            </summary>
            <param name="t">The specific thread.</param>
            <returns>true if this thread has been started and has not terminated normally or aborted; otherwise, false.</returns>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event.
            </summary>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a Reset change.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItems">The items that are affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a one-item change.
            </summary>
            <param name="action">The action that caused the event.
            This can be set to Reset, Add, or Remove.</param>
            <param name="changedItem">The item that is affected by the change.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item change or a reset change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Reset, Add, or Remove.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="startingIndex">The original items that are replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a one-item change.
            </summary>
            <param name="action"></param>
            <param name="changedItem">The item that is affected by the change.</param>
            <param name="index">The index where the change occurred.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a one-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Replace.</param>
            <param name="newItems">The new items that are replacing the original items.</param>
            <param name="oldItems">The original items that are replaced.</param>
            <param name="startingIndex">The index of the first item of the items that are being replaced.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item Move change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Move.</param>
            <param name="changedItems">The items affected by the change.</param>
            <param name="index">The new index for the changed items.</param>
            <param name="oldIndex">The old index for the changed items.</param>
            <exception cref="T:System.ArgumentException">If action is not Move or index is less than 0.</exception>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a multi-item Move change.
            </summary>
            <param name="action">The action that caused the event. This can only be set to Move.</param>
            <param name="changedItem">The item that is affected by the change.</param>
            <param name="index">The new index for the changed item.</param>
            <param name="oldIndex">The old index for the changed item.</param>
        </member>
        <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class that describes a one-item Replace change.
            </summary>
            <param name="action">The action that caused the event. This can be set to Replace.</param>
            <param name="newItem">The new item that is replacing the original item.</param>
            <param name="oldItem">The original item that is replaced.</param>
            <param name="index">The index of the item being replaced.</param>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
            <summary>
            Gets the list of new items involved in the change.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
            <summary>
            Gets the list of items affected by a Replace, Remove, or Move action.
            </summary>
        </member>
        <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Gets the index at which a Move, Remove, ore Replace action occurred.
            </summary>
        </member>
        <member name="T:InTheHand.GuidInTheHand">
            <summary>
            Helper class for generating a globally unique identifier (GUID).
            </summary>
            <seealso cref="T:System.Guid"/>
            <remarks>This method uses the native COM sub-system to generate a Guid rather than a managed random number generator offering significantly better performance than Guid.NewGuid().</remarks>
        </member>
        <member name="M:InTheHand.GuidInTheHand.NewGuid">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> class.
            </summary>
            <returns>A new <see cref="T:System.Guid"/> object</returns>
            <remarks>This is a convenient static method that you can call to get a new <see cref="T:System.Guid"/>.
            <para>There is a very low probability that the value of the new <see cref="T:System.Guid"/> is all zeroes or equal to any other <see cref="T:System.Guid"/>.</para></remarks>
        </member>
        <member name="T:InTheHand.Configuration.ConfigurationManager">
            <summary>
            Provides access to configuration files for client applications.
            </summary>
            <remarks>Equivalent to System.Configuration.ConfigurationManager</remarks>
            <example>The following code example shows how to use the ConfigurationManager class to access the appSettings configuration section.
            <code lang="vbnet">
            Imports System
            Imports System.Collections.Specialized
            Imports System.Collections.ObjectModel
            Imports System.Collections
            Imports System.Text
            Imports System.Configuration
            
            Class UsingConfigurationManager
            
                ' Show how to use AppSettings.
                Shared Sub DisplayAppSettings() 
                
                    ' Get the AppSettings collection.
                    Dim appSettings As NameValueCollection = ConfigurationManager.AppSettings
                    
                    Dim keys As String() = appSettings.AllKeys
            
                    Debug.WriteLine()
                    Debug.WriteLine("Application appSettings:")
            
                    ' Loop to get key/value pairs.
                    Dim i As Integer
                    For i = 0 To appSettings.Count
            
                        Debug.WriteLine("#{0} Name: {1} Value: {2}", i, _
                            keys(i), appSettings(i))
                    Next i
                    
                End Sub 'DisplayAppSettings
            
                Shared Sub Main(ByVal args() As String) 
            
                    ' Show how to use AppSettings.
                    DisplayAppSettings()
            
                End Sub 'Main 
                
            End Class 'UsingConfigurationManager
            </code>
            <code lang="cs">
            using System;
            using System.Collections.Specialized;
            using System.Collections.ObjectModel;
            using System.Collections;
            using System.Text;
            using System.Configuration;
            
            namespace InTheHand.Samples
            {
                class UsingConfigurationManager
                {
                    // Show how to use AppSettings.
                    static void DisplayAppSettings()
                    {
                        // Get the AppSettings collection.
                        NameValueCollection appSettings = ConfigurationManager.AppSettings;
                        
                        string[] keys = appSettings.AllKeys;
                        
                        Debug.WriteLine();
                        Debug.WriteLine("Application appSettings:");
                        
                        // Loop to get key/value pairs.
                        for (int i = 0; i &lt; appSettings.Count; i++)
                            Debug.WriteLine("#{0} Name: {1} Value: {2}", i, keys[i], appSettings[i]);
                    }
                    
                    static void Main(string[] args)
                    {
                        // Show how to use AppSettings.
                        DisplayAppSettings();
                    }
                }
            }
            </code></example>
        </member>
        <member name="P:InTheHand.Configuration.ConfigurationManager.AppSettings">
            <summary>
            Gets the <b>appSettings</b> section data for the current application's default configuration.
            </summary>
            <value>Returns a <see cref="T:System.Collections.Specialized.NameValueCollection"/> object that contains the contents of the <b>appSettings</b> section for the current application's configuration.</value>
            <example>The following code example shows how to use the AppSettings property.
            <code lang="vbnet">
            ' Show how to use AppSettings.
            Shared Sub DisplayAppSettings() 
                
                ' Get the AppSettings collection.
                Dim appSettings As NameValueCollection = ConfigurationManager.AppSettings
                    
                Dim keys As String() = appSettings.AllKeys
            
                Debug.WriteLine()
                Debug.WriteLine("Application appSettings:")
            
                ' Loop to get key/value pairs.
                Dim i As Integer
                For i = 0 To appSettings.Count
            
                    Debug.WriteLine("#{0} Name: {1} Value: {2}", i, keys(i), appSettings(i))
                Next i
                    
            End Sub 'DisplayAppSettings
            </code>
            <code lang="cs">
            // Show how to use AppSettings.
            static void DisplayAppSettings()
            {
                // Get the AppSettings collection.
                NameValueCollection appSettings = ConfigurationManager.AppSettings;
                        
                string[] keys = appSettings.AllKeys;
                        
                Debug.WriteLine();
                Debug.WriteLine("Application appSettings:");
                        
                // Loop to get key/value pairs.
                for (int i = 0; i &lt; appSettings.Count; i++)
                    Debug.WriteLine("#{0} Name: {1} Value: {2}", i, keys[i], appSettings[i]);
            }</code></example>
        </member>
        <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
            <summary>
            Describes the action that caused a <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event. 
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
            <summary>
            One or more items were added to the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
            <summary>
            One or more items were removed from the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
            <summary>
            One or more items were replaced in the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
            <summary>
            One or more items were moved within the collection.
            </summary>
        </member>
        <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
            <summary>
            The content of the collection changed dramatically.
            </summary>
        </member>
        <member name="T:InTheHand.IntPtrInTheHand">
            <summary>
            Extends the functionality of <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:InTheHand.IntPtrInTheHand.Add(System.IntPtr,System.Int32)">
            <summary>
            Adds an offset to the value of a pointer.
            </summary>
            <param name="pointer">The pointer to add the offset to.</param>
            <param name="offset">The offset to add.</param>
            <returns>A new pointer that reflects the addition of offset to pointer.</returns>
        </member>
        <member name="M:InTheHand.IntPtrInTheHand.Subtract(System.IntPtr,System.Int32)">
            <summary>
            Subtracts an offset from the value of a pointer.
            </summary>
            <param name="pointer">The pointer to subtract the offset from.</param>
            <param name="offset">The pointer to subtract the offset from.</param>
            <returns>A new pointer that reflects the subtraction of offset from pointer.</returns>
        </member>
        <member name="T:InTheHand.IO.StreamInTheHand">
            <summary>
            Provides helper methods for the <see cref="T:System.IO.Stream"/> class.
            </summary>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Pocket PC 2003, Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Embedded</term><description>Windows CE .NET 4.1 and later</description></item>
            <item><term>Windows Phone</term><description>Windows Phone 7</description></item>
            </list></remarks>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:InTheHand.IO.StreamInTheHand.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Reads all the bytes from the current stream and writes them to a destination stream.
            </summary>
            <param name="s"></param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <remarks>Copying begins at the current position in the current stream.</remarks>
            <exception cref="T:System.ArgumentNullException">destination is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The current stream does not support reading.
            <para>-or-</para>
            destination does not support writing.</exception>
        </member>
        <member name="M:InTheHand.IO.StreamInTheHand.CopyTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Reads all the bytes from the current stream and writes them to a destination stream, using a specified buffer size.
            </summary>
            <param name="s"></param>
            <param name="destination">The stream that will contain the contents of the current stream.</param>
            <param name="bufferSize">The size of the buffer. 
            This value must be greater than zero. 
            The default size is 4096.</param>
            <remarks>Copying begins at the current position in the current stream.</remarks>
            <exception cref="T:System.ArgumentNullException">destination is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bufferSize is negative or zero.</exception>
            <exception cref="T:System.NotSupportedException">The current stream does not support reading.
            <para>-or-</para>
            destination does not support writing.</exception>
        </member>
        <member name="T:InTheHand.ComponentModel.DoWorkEventHandler">
            <summary>
            Represents the method that will handle the DoWork event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.ComponentModel.DoWorkEventArgs"/> that contains the event data.</param>
            <remarks>When you create a <see cref="T:InTheHand.ComponentModel.DoWorkEventHandler"/> delegate, you identify the method that will handle the event.
            To associate the event with your event handler, add an instance of the delegate to the event.
            The event-handler method is called whenever the event occurs, unless you remove the delegate.</remarks>
        </member>
        <member name="T:InTheHand.ComponentModel.DoWorkEventArgs">
            <summary>
            Provides data for the <see cref="!:BackgroundWorker.DoWork"/> event handler.
            </summary>
        </member>
        <member name="M:InTheHand.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.ComponentModel.DoWorkEventArgs"/> class.
            </summary>
            <param name="argument">Specifies an argument for an asynchronous operation.</param>
        </member>
        <member name="P:InTheHand.ComponentModel.DoWorkEventArgs.Argument">
            <summary>
            Gets a value that represents the argument of an asynchronous operation.
            </summary>
        </member>
        <member name="P:InTheHand.ComponentModel.DoWorkEventArgs.Result">
            <summary>
            Gets or sets a value that represents the result of an asynchronous operation.
            </summary>
        </member>
        <member name="T:InTheHand.ComponentModel.RunWorkerCompletedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="!:BackgroundWorker.RunWorkerCompleted"/> event of a <see cref="!:BackgroundWorker"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:InTheHand.ComponentModel.RunWorkerCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:InTheHand.ComponentModel.RunWorkerCompletedEventArgs">
            <summary>
            Provides data for the <see cref="!:BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
        </member>
        <member name="M:InTheHand.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.ComponentModel.RunWorkerCompletedEventArgs"/> class.
            </summary>
            <param name="result">The result of an asynchronous operation.</param>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="canceled">A value indicating whether the asynchronous operation was canceled.</param>
        </member>
        <member name="P:InTheHand.ComponentModel.RunWorkerCompletedEventArgs.Result">
            <summary>
            Gets a value that represents the result of an asynchronous operation.
            </summary>
        </member>
    </members>
</doc>
