<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Windows.Forms</name>
    </assembly>
    <members>
        <member name="T:InTheHand.Windows.Forms.PowerLineStatus">
            <summary>
            Specifies the system power status.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.PowerLineStatus.Offline">
            <summary>
            The system is offline.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.PowerLineStatus.Online">
            <summary>
            The system is online.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.PowerLineStatus.BackupPower">
            <summary>
            The system is on backup power.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.PowerLineStatus.Unknown">
            <summary>
            The power status of the system is unknown.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.ListBoxInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.ListBox"/>.
            </summary>
            <seealso cref="T:System.Windows.Forms.ListBox"/>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.FindString(System.Windows.Forms.ListBox,System.String)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ListBox"/> that starts with the specified string.
            </summary>
            <param name="lb">The <see cref="T:System.Windows.Forms.ListBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.FindString(System.Windows.Forms.ListBox,System.String,System.Int32)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ListBox"/> that starts with the specified string.
            </summary>
            <param name="lb">The <see cref="T:System.Windows.Forms.ListBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched.
            Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.FindStringExact(System.Windows.Forms.ListBox,System.String)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ListBox"/> that matches the specified string.
            </summary>
            <param name="lb">The <see cref="T:System.Windows.Forms.ListBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.FindStringExact(System.Windows.Forms.ListBox,System.String,System.Int32)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ListBox"/> after the specified index that matches the specified string.
            </summary>
            <param name="lb">The <see cref="T:System.Windows.Forms.ListBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.GetItemHeight(System.Windows.Forms.ListBox)">
            <summary>
            Gets the height of an item in the ListBox.
            </summary>
            <param name="listBox"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.SetItemHeight(System.Windows.Forms.ListBox,System.Int32)">
            <summary>
            Sets the height of an item in the ListBox.
            </summary>
            <param name="listBox"></param>
            <param name="value"></param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.GetNoIntegralHeight(System.Windows.Forms.ListBox)">
            <summary>
            Gets a value indicating whether the list uses the full height specified in the designer.
            </summary>
            <param name="listBox">The <see cref="T:System.Windows.Forms.ListBox"/> control.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListBoxInTheHand.SetNoIntegralHeight(System.Windows.Forms.ListBox,System.Boolean)">
            <summary>
            Gets a value indicating whether the list uses the full height specified in the designer.
            </summary>
            <param name="listBox">The <see cref="T:System.Windows.Forms.ListBox"/> control.</param>
            <param name="enable">true if gradient is to be drawn behind list; otherwise, false. The default is false.</param>
        </member>
        <member name="T:InTheHand.Windows.Forms.ComboBoxInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
            <seealso cref="T:System.Windows.Forms.ComboBox"/>
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.FindString(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ComboBox"/> that starts with the specified string.
            </summary>
            <param name="cb">The <see cref="T:System.Windows.Forms.ComboBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.FindString(System.Windows.Forms.ComboBox,System.String,System.Int32)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ComboBox"/> that starts with the specified string.
            </summary>
            <param name="cb">The <see cref="T:System.Windows.Forms.ComboBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>        
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.FindStringExact(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ComboBox"/> that matches the specified string.
            </summary>
            <param name="cb">The <see cref="T:System.Windows.Forms.ComboBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.FindStringExact(System.Windows.Forms.ComboBox,System.String,System.Int32)">
            <summary>
            Finds the first item in the <see cref="T:System.Windows.Forms.ComboBox"/> after the specified index that matches the specified string.
            </summary>
            <param name="cb">The <see cref="T:System.Windows.Forms.ComboBox"/> to search.</param>
            <param name="s">The <see cref="T:System.String"/> to search for.</param>
            <param name="startIndex">The zero-based index of the item before the first item to be searched. Set to -1 to search from the beginning of the control.</param>
            <returns>The zero-based index of the first item found; returns -1 if no match is found.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.GetCaption(System.Windows.Forms.ComboBox)">
            <summary>
            Gets the caption of the associated full-screen picker (Standard Edition/Smartphone only)
            </summary>
            <param name="cb">ComboBox control.</param>
            <returns>The caption of the associated full-screen picker</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ComboBoxInTheHand.SetCaption(System.Windows.Forms.ComboBox,System.String)">
            <summary>
            Sets the caption of the associated full-screen picker (Standard Edition/Smartphone only)
            </summary>
            <param name="cb">ComboBox control.</param>
            <param name="caption">The caption to display in the Titlebar.</param>
        </member>
        <member name="T:InTheHand.Windows.Forms.ButtonInTheHand">
            <summary>
            Extension methods for <see cref="T:System.Windows.Forms.Button"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.ButtonInTheHand.SetMultiline(System.Windows.Forms.ButtonBase)">
            <summary>
            Supports multi-line text on the Button control (to match default behaviour on the desktop).
            </summary>
            <param name="button">The button to update.</param>
        </member>
        <member name="T:InTheHand.Windows.Forms.CreateParams">
            <summary>
            Encapsulates the information needed when creating a control.
            </summary>
            <remarks>For more information about creating control parameters, see the CreateWindow and CreateWindowEx functions and the CREATESTRUCT structure documentation in the Windows Platform SDK reference located in the MSDN Library.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.CreateParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Windows.Forms.CreateParams"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Caption">
            <summary>
            Gets or sets the control's initial text.
            </summary>
            <value>The control's initial text.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.ClassName">
            <summary>
            Gets or sets the name of the Windows class to derive the control from.
            </summary>
            <value>The name of the Windows class to derive the control from.</value>
            <remarks>The default value for this property is a null reference (Nothing in Visual Basic), indicating that the control is not derived from an existing control class. To derive from an existing control class, store the system class name in this property.
            For example, to derive from the standard <see cref="T:System.Windows.Forms.Button"/> control, set this property to "BUTTON".</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.ClassStyle">
            <summary>
            Gets or sets a bitwise combination of class style values.
            </summary>
            <remarks>The ClassStyle property is ignored if the <see cref="P:InTheHand.Windows.Forms.CreateParams.ClassName"/> property is not a null reference (Nothing in Visual Basic).
            For more information about creating control parameters, see the CreateWindow and CreateWindowEx functions and the CREATESTRUCT structure documentation in the Windows Platform SDK reference located in the MSDN Library.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Style">
            <summary>
            Gets or sets a bitwise combination of window style values.
            </summary>
            <remarks>The Style property controls the appearance of the control and its initial state.
            For more information about creating control parameters, see the CreateWindow and CreateWindowEx functions and the CREATESTRUCT structure documentation in the Windows Platform SDK reference located in the MSDN Library.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Param">
            <summary>
            Gets or sets additional parameter information needed to create the control.
            </summary>
            <value>The <see cref="T:System.Object"/> that holds additional parameter information needed to create the control.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.ExStyle">
            <summary>
            Gets or sets a bitwise combination of extended window style values.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Height">
            <summary>
            Gets or sets the initial height of the control.
            </summary>
            <value>The numeric value that represents the initial height of the control.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Parent">
            <summary>
            Gets or sets the control's parent.
            </summary>
            <value>An <see cref="T:System.IntPtr"/> that contains the window handle of the control's parent.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Width">
            <summary>
            Gets or sets the initial width of the control.
            </summary>
            <value>The numeric value that represents the initial width of the control.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.X">
            <summary>
            Gets or sets the initial left position of the control.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.CreateParams.Y">
            <summary>
            Gets or sets the initial top position of the control.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.Help">
            <summary>
            Provides Help support for all Windows Mobile platforms.
            </summary>
            <seealso cref="T:System.Windows.Forms.Help"/>
        </member>
        <member name="M:InTheHand.Windows.Forms.Help.ShowHelp(System.Windows.Forms.Control,System.String)">
            <summary>
            Displays the contents of the Help file at the specified URL.
            </summary>
            <param name="parent">Not used by the .NET Compact Framework</param>
            <param name="url">The path and name of the Help file.</param>
            <remarks>Supports Windows Mobile Standard Edition using the default .html application.
            You can optionally specify the topic anchor within the file e.g. "MyApp.htm#MyTopic"</remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.ProgressBarInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.ProgressBar"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.ProgressBarInTheHand.PerformStep(System.Windows.Forms.ProgressBar)">
            <summary>
            Advances the current position of the progress bar by the amount of the Step property.
            </summary>
            <param name="progressBar">The progress bar.</param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Pocket PC 2003 and later, Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE 4.1 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ProgressBarInTheHand.SetStep(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
            Sets the amount by which a call to the <see cref="M:InTheHand.Windows.Forms.ProgressBarInTheHand.PerformStep(System.Windows.Forms.ProgressBar)"/> method increases the current position of the progress bar.
            </summary>
            <param name="progressBar">The progress bar.</param>
            <param name="value">The amount by which to increment the progress bar with each call to the <see cref="M:InTheHand.Windows.Forms.ProgressBarInTheHand.PerformStep(System.Windows.Forms.ProgressBar)"/> method.
            The default is 10.</param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Pocket PC 2003 and later, Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE 4.1 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ProgressBarInTheHand.SetMarqueeStyle(System.Windows.Forms.ProgressBar,System.Boolean)">
            <summary>
            
            </summary>
            <param name="progressBar"></param>
            <param name="value"></param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Embedded Compact</term><description>Windows CE 6.0 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.TabControlInTheHand">
            <summary>
            Provides helper methods for the <see cref="T:System.Windows.Forms.TabControl"/> on Windows Mobile 6.5.
            </summary>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.5 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TabControlInTheHand.EnableVisualStyles(System.Windows.Forms.TabControl)">
            <summary>
            Updates the selected <see cref="T:System.Windows.Forms.TabControl"/> with the Windows Mobile 6.5 style.
            </summary>
            <param name="tabControl"></param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.5 Professional or Classic Edition and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.SystemInformationInTheHand">
            <summary>
            Provides information about the current system environment.
            </summary>
            <remarks>The <see cref="T:InTheHand.Windows.Forms.SystemInformationInTheHand"/> class provides static properties that can be used to get information about the current system environment.
            The class provides access to information such as Windows display element sizes, operating system settings and the capabilities of hardware installed on the system.</remarks>
            <seealso cref="T:System.Windows.Forms.SystemInformation"/>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.CaptionHeight">
            <summary>
            Gets the height, in pixels, of the standard title bar area of a window.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.CursorSize">
            <summary>
            Gets the maximum size, in pixels, that a cursor can occupy.
            </summary>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Embedded Compact</term><description>Windows CE .NET 4.2 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.DebugOS">
            <summary>
            Gets a value indicating whether the debug version of Windows CE is installed.
            </summary>
            <value>true if the debugging version of Windows CE is installed; otherwise, false.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.DoubleClickSize">
            <summary>
            Gets the dimensions, in pixels, of the area within which the user must click twice for the operating system to consider the two clicks a double-click.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.DoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds allowed between mouse clicks for a double-click to be valid.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.FixedFrameBorderSize">
            <summary>
            Gets the thickness, in pixels, of the frame border of a window that has a caption and is not resizable.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.HorizontalScrollBarArrowWidth">
            <summary>
            Gets the width, in pixels, of the arrow bitmap on the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.HorizontalScrollBarHeight">
            <summary>
            Gets the default height, in pixels, of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.IconSize">
            <summary>
            Gets the dimensions, in pixels, of the Windows default program icon size.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.IconSpacingSize">
            <summary>
            Gets the size, in pixels, of the grid square used to arrange icons in a large-icon view.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.MenuHeight">
            <summary>
            Gets the height, in pixels, of one line of a menu.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.MonitorCount">
            <summary>
            Gets the number of display monitors.
            </summary>
            <value>The number of monitors that make up the desktop.</value>
            <remarks>Windows Mobile devices use only a single display.
            The <b>MonitorCount</b> property indicates the number of monitors currently recognized by the operating system.
            This property returns a value greater than one only if multiple monitors are currently recognized by the operating system.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.MonitorsSameDisplayFormat">
            <summary>
            Gets a value indicating whether all the display monitors are using the same pixel color format.
            </summary>
            <value>true if all monitors are using the same pixel color format; otherwise, false.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.PowerStatus">
            <summary>
            Gets the current system power status.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.PrimaryMonitorSize">
            <summary>
            Gets the dimensions, in pixels, of the current video mode of the primary display.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.SmallIconSize">
            <summary>
            Gets the dimensions, in pixels, of a small icon.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.VerticalScrollBarArrowHeight">
            <summary>
            Gets the height, in pixels, of the arrow bitmap on the vertical scroll bar.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.VerticalScrollBarWidth">
            <summary>
            Gets the default width, in pixels, of the vertical scroll bar.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.VirtualScreen">
            <summary>
            Gets the bounds of the virtual screen.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.SystemInformationInTheHand.WorkingArea">
            <summary>
            Gets the size, in pixels, of the working area of the screen.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.TextBoxInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <seealso cref="T:System.Windows.Forms.TextBox"/>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.AppendText(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Appends text to the current text of a text box.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <param name="text">The text to append to the current contents of the text box.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.Cut(System.Windows.Forms.TextBox)">
            <summary>
            Moves the current selection in the text box to the Clipboard.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <remarks>This method will only cut text from the text box if text is selected in the control.
            You can use this method, instead of using the Clipboard class, to copy text in the text box and move it to the Clipboard.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.Copy(System.Windows.Forms.TextBox)">
            <summary>
            Copies the current selection of the text editing control to the Clipboard.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <remarks>A copy operation copies the selected text to the Clipboard.
            Note that the selected text is not removed from the text editing control in the process.
            A similar method, <see cref="M:InTheHand.Windows.Forms.TextBoxInTheHand.Cut(System.Windows.Forms.TextBox)"/>, moves the current selection to the Clipboard and removes the selected text from the text editing control in the process.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.Paste(System.Windows.Forms.TextBox)">
            <summary>
            Replaces the current selection in the text box with the contents of the Clipboard.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <remarks>The Paste method will only paste text into the control if text is currently stored in the Clipboard.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.Clear(System.Windows.Forms.TextBox)">
            <summary>
            Clears all text from the text box control.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <remarks>You can use this method to clear the contents of the control instead of assigning the <see cref="N:InTheHand.Text"/> property an empty string.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.ClearUndo(System.Windows.Forms.TextBox)">
            <summary>
            Clears information about the most recent operation from the undo buffer of the text box.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <remarks>You can use this method to prevent an undo operation from repeating, based on the state of your application.</remarks>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.GetCaption(System.Windows.Forms.TextBox)">
            <summary>
            Gets the caption of the associated full-screen edit control
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <returns></returns>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Standard Edition only</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.SetCaption(System.Windows.Forms.TextBox,System.String)">
            <summary>
            Sets the caption of the associated full-screen edit control
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <param name="caption">Caption to display in the Titlebar.</param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Standard Edition only</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.GetLines(System.Windows.Forms.TextBox)">
            <summary>
            Gets the lines of text in a text box control.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <returns>An array of strings that contains the text in a text box control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.TextBoxInTheHand.GetLineFromCharIndex(System.Windows.Forms.TextBox,System.Int32)">
            <summary>
            Retrieves the line number from the specified character position within the text of the control.
            </summary>
            <param name="textBox">The <see cref="T:System.Windows.Forms.TextBox"/> control.</param>
            <param name="index">The character index position to search.</param>
            <returns>The zero-based line number in which the character index is located.</returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.NativeWindow">
            <summary>
            Provides a low-level encapsulation of a window handle and a window procedure. 
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:InTheHand.Windows.Forms.NativeWindow"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
            <summary>
            Assigns a handle to this window.   
            </summary>
            <param name="handle">The handle to assign to this window.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.CreateHandle(InTheHand.Windows.Forms.CreateParams)">
            <summary>
             Creates a window and its handle with the specified creation parameters.   
            </summary>
            <param name="cp">CreateParams that specifies the creation parameters for this window.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.ReleaseHandle">
            <summary>
            Releases the handle associated with this window. 
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.WndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.   
            </summary>
            <param name="m">A <see cref="T:Microsoft.WindowsCE.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.DefWndProc(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            It is an error to call this method when the <see cref="P:InTheHand.Windows.Forms.NativeWindow.Handle"/> property is 0.  
            </summary>
            <param name="m">A <see cref="T:Microsoft.WindowsCE.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.DestroyHandle">
            <summary>
            Destroys the window and its handle.  
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.OnHandleChange">
            <summary>
            Specifies a notification method that is called when the handle for a window is changed.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
            <summary>
            Retrieves the window associated with the specified handle.  
            </summary>
            <param name="handle">A handle to a window.</param>
            <returns>The <see cref="T:InTheHand.Windows.Forms.NativeWindow"/> associated with the specified handle.
            This method returns null when the handle does not have an associated window.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.NativeWindow.Finalize">
            <summary>
            Releases the resources associated with this window.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.NativeWindow.Handle">
            <summary>
            Gets the handle for this window.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.IWin32Window">
            <summary>
            Provides an interface to expose Win32 HWND handles.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.IWin32Window.Handle">
            <summary>
            Gets the handle to the window represented by the implementer.
            </summary>
            <value>A handle to the window represented by the implementer.</value>
            <remarks>Depending on the implementer, the value of the Handle property could change during the life of the window.</remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.MethodInvoker">
            <summary>
            Represents a delegate that can execute any method in managed code that is declared void and takes no parameters.
            </summary>
            <remarks>MethodInvoker provides a simple delegate that is used to invoke a method with a void parameter list.
            This delegate can be used when making calls to a control's <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)"/> method, or when you need a simple delegate but do not want to define one yourself.</remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.ControlInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.GetDesignMode(System.Windows.Forms.Control)">
            <summary>
            Gets a value indicating whether a control is being used on a design surface.
            </summary>
            <param name="c">The Control.</param>
            <returns>true if the control is being used in a designer; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.DrawToBitmap(System.Windows.Forms.Control,System.Drawing.Bitmap,System.Drawing.Rectangle)">
            <summary>
            Supports rendering to the specified bitmap.
            </summary>
            <param name="control">The Control.</param>
            <param name="bitmap">The bitmap to be drawn to.</param>
            <param name="targetBounds">The bounds within which the control is rendered.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.FindForm(System.Windows.Forms.Control)">
            <summary>
            Retrieves the <see cref="T:System.Windows.Forms.Form"/> that the control is on.
            </summary>
            <param name="c">The <see cref="T:System.Windows.Forms.Control"/>.</param>
            <returns>The <see cref="T:System.Windows.Forms.Form"/> that the control is on.</returns>
            <remarks>The control's <see cref="P:System.Windows.Forms.Control.Parent"/> property value might not be the same as the <see cref="T:System.Windows.Forms.Form"/> returned by FindForm method.
            For example, if a <see cref="T:System.Windows.Forms.RadioButton"/> control is contained within a <see cref="T:System.Windows.Forms.Panel"/> control, and the <see cref="T:System.Windows.Forms.Panel"/> is on a Form, the RadioButton control's Parent is the <see cref="T:System.Windows.Forms.Panel"/> and the <see cref="T:System.Windows.Forms.Panel"/> control's Parent is the <see cref="T:System.Windows.Forms.Form"/>.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.Invalidate(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Invalidates the entire surface of the control and causes a paint message to be sent to the control.
            Optionally, invalidates the child controls assigned to the control.
            </summary>
            <param name="c">The control.</param>
            <param name="invalidateChildren">true to invalidate the control's child controls; otherwise, false.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.SetOpacity(System.Windows.Forms.Control,System.Single)">
            <summary>
            Gets or sets the opacity level of the control.
            </summary>
            <param name="c">The Control.</param>
            <param name="value">The level of opacity for the form. The default is 1.00.</param>
            <remarks>The Opacity property enables you to specify a level of transparency for the form and its controls.
            When this property is set to a value less than 100 percent (1.00), the entire form, including borders, is made more transparent.
            Setting this property to a value of 0 percent (0.00) makes the form completely invisible.
            You can use this property to provide different levels of transparency or to provide effects such as phasing a form in or out of view.
            For example, you can phase a form into view by setting the Opacity property to a value of 0 percent (0.00) and gradually increasing the value until it reaches 100 percent (1.00).
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.5 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.SetTransparencyKey(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Sets the color that will represent transparent areas of the form.
            </summary>
            <param name="f">The form.</param>
            <param name="value">A <see cref="T:System.Drawing.Color"/> that represents the color to display transparently on the form.</param>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.5 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.SetMultiline(System.Windows.Forms.ButtonBase,System.Boolean)">
            <summary>
            Gets a value which indicates whether the button has multi-line text enabled.
            </summary>
            <param name="bb">Button, RadioButton or Checkbox control</param>
            <param name="value">true to enable multi-line text, else false.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.GetMultiline(System.Windows.Forms.ButtonBase)">
            <summary>
            Gets a value which indicates whether the button has multi-line text enabled.
            </summary>
            <param name="bb">Button, RadioButton or Checkbox control</param>
            <returns>true if multi-line text is enabled, else false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.SetBorder(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets whether the control draws a 1 pixel border.
            </summary>
            <param name="c"></param>
            <param name="value"></param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlInTheHand.SetRightToLeft(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.
            </summary>
            <param name="c"></param>
            <param name="value"></param>
        </member>
        <member name="P:InTheHand.Windows.Forms.ControlInTheHand.ModifierKeys">
            <summary>
            Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.
            </summary>
            <value>A bitwise combination of the <see cref="T:System.Windows.Forms.Keys"/> values.
            The default is <see cref="F:System.Windows.Forms.Keys.None"/>.</value>
            <example>The following code example hides a button when the CTRL key is pressed while the button is clicked.
            This example requires that you have a Button named button1 on a Form.
            <code lang="vbnet">
            Private Sub button1_Click(sender As Object, e As EventArgs) Handles button1.Click
               ' If the CTRL key is pressed when the 
               ' control is clicked, hide the control. 
               If ControlHelper.ModifierKeys = Keys.Control Then
                  CType(sender, Control).Hide()
               End If
            End Sub
            </code>
            <code lang="cs">
            private void button1_Click(object sender, System.EventArgs e)
            {
              /* If the CTRL key is pressed when the 
                 * control is clicked, hide the control. */
              if(ControlHelper.ModifierKeys == Keys.Control)
              {
                 ((Control)sender).Hide();
              }
            }
            </code></example>
        </member>
        <member name="T:InTheHand.Windows.Forms.ApplicationInTheHand">
            <summary>
            Provides properties which extend the <see cref="T:System.Windows.Forms.Application"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.ApplicationInTheHand.AddMessageFilter(InTheHand.Windows.Forms.IMessageFilter)">
            <summary>
            Adds a message filter to monitor Windows messages as they are routed to their destinations.
            </summary>
            <param name="value">The implementation of the <see cref="T:InTheHand.Windows.Forms.IMessageFilter"/> interface you want to install.</param>
            <remarks>Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler.
            Message filters are unique to a specific thread.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ApplicationInTheHand.RemoveMessageFilter(InTheHand.Windows.Forms.IMessageFilter)">
            <summary>
            Removes a message filter from the message pump of the application.
            </summary>
            <param name="value">The implementation of the <see cref="T:InTheHand.Windows.Forms.IMessageFilter"/> to remove from the application.</param>
            <remarks>You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ApplicationInTheHand.FilterMessage(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Runs any filters against a window message, and returns a copy of the modified message.
            </summary>
            <param name="message">The Windows event message to filter.</param>
            <returns>True if the filters were processed; otherwise, false.</returns>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.CommonAppDataPath">
            <summary>
            Gets the path for the application data that is shared among all users. 
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.CommonAppDataRegistry">
            <summary>
            Gets the registry key for the application data that is shared among all users.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.CompanyName">
            <summary>
            Gets the company name associated with the application.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.ExecutablePath">
            <summary>
            Gets the path for the executable file that started the application, including the executable name.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.ProductName">
            <summary>
            Gets the product name associated with this application.
            </summary>
            <value>The product name.</value>
            <remarks>ProductName is taken from the metadata of the assembly containing the main form of the current application.
            You can set it by setting <see cref="T:System.Reflection.AssemblyProductAttribute"/> inside of your assembly manifest.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.ProductVersion">
            <summary>
            Gets the product version associated with this application.
            </summary>
            <value>The product version.</value>
            <remarks>Typically, a version number displays as major number.minor number.build number.private part number. 
            You can set it explicitly by setting the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> within your assembly manifest.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.StartupPath">
            <summary>
            Gets the path for the executable file that started the application, not including the executable name.
            </summary>
            <value>The path for the executable file that started the application.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.UserAppDataRegistry">
            <summary>
            Gets the registry key for the application data of a user.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.ApplicationInTheHand.IsSingleInstance">
            <summary>
            Allows you to enforce a single instance application on platforms other than Windows Mobile.
            </summary>
            <remarks>On generic Windows CE platforms the .NET Compact Framework does not enforce a single instance of your application.
            If you want to override this behaviour and provide a behaviour to match Windows Mobile then set this property to true in your startup (e.g. static void Main()) procedure before Application.Run is called.
            If a second instance of the application is created it will be closed and the initial instance will be brought to the foreground.</remarks>
            <example>
            <code lang="cs">
            using InTheHand.Windows.Forms;
            
            [MTAThread]
            static void Main()
            {
                ApplicationHelper.IsSingleInstance = true;
                Application.Run(new Form1());
            }</code>
            </example>
            <exception cref="T:System.PlatformNotSupportedException">Property is readonly on Windows Mobile (and will always return true).</exception>
        </member>
        <member name="T:InTheHand.Windows.Forms.IMessageFilter">
            <summary>
            Defines a message filter interface.
            </summary>
            <remarks>This interface allows an application to capture a message before it is dispatched to a control or form.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.IMessageFilter.PreFilterMessage(Microsoft.WindowsCE.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched.
            </summary>
            <param name="m">The message to be dispatched. You cannot modify this message. </param>
            <returns>true to filter the message and stop it from being dispatched; false to allow the message to continue to the next filter or control.</returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.FolderBrowserDialog">
            <summary>
            Represents a common dialog box that allows the user to choose a folder.
            </summary>
            <remarks>Throws a PlatformNotSupportedException if API is missing.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.FolderBrowserDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Windows.Forms.FolderBrowserDialog"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Windows.Forms.FolderBrowserDialog.ShowDialog">
            <summary>
            Runs a common dialog box with a default owner.
            </summary>
            <returns><see cref="T:System.Windows.Forms.DialogResult">DialogResult.OK</see> if the user clicks OK in the dialog box; otherwise, <see cref="T:System.Windows.Forms.DialogResult">DialogResult.Cancel</see>.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.FolderBrowserDialog.ShowDialog(InTheHand.Windows.Forms.IWin32Window)">
            <summary>
            Runs a common dialog box with the specified owner.
            </summary>
            <param name="owner">Any object that implements <see cref="T:InTheHand.Windows.Forms.IWin32Window"/> that represents the top-level window that will own the modal dialog box.</param>
            <returns><see cref="T:System.Windows.Forms.DialogResult">DialogResult.OK</see> if the user clicks OK in the dialog box; otherwise, <see cref="T:System.Windows.Forms.DialogResult">DialogResult.Cancel</see>.</returns>
        </member>
        <member name="P:InTheHand.Windows.Forms.FolderBrowserDialog.SelectedPath">
            <summary>
            Gets the path selected by the user.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.FolderBrowserDialog.Description">
            <summary>
            Gets or sets the descriptive text displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.ScrollableControlInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.ScrollableControl"/>.
            </summary>
            <remarks>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.1 Professional Edition and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE 6.0</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ScrollableControlInTheHand.GetGesturesEnabled(System.Windows.Forms.ScrollableControl)">
            <summary>
            Gets a value which determines if Pan and Flick gestures are automatically handled in the ScrollableControl.
            </summary>
            <param name="control">The ScrollableControl</param>
            <returns>true if automatic gestures are enabled, else false.</returns>
            <remarks>
            <list type="table"><listheader><term>Requirements</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile 6.1 and later</description></item>
            <item><term>Windows Embedded</term><description>Windows Embedded 6.0</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ScrollableControlInTheHand.SetGesturesEnabled(System.Windows.Forms.ScrollableControl,System.Boolean)">
            <summary>
            Sets a value which determines if Pan and Flick gestures are automatically handled in the ScrollableControl.
            </summary>
            <param name="control">The ScrollableControl</param>
            <param name="value">true to enable automatic gestures, false to disable.</param>
            <remarks>
            <list type="table"><listheader><term>Requirements</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile 6.1 and later</description></item>
            <item><term>Windows Embedded</term><description>Windows Embedded 6.0</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:InTheHand.ComponentModel.BackgroundWorker">
            <summary>
            Executes an operation on a separate thread.
            </summary>
            <remarks><para>Equivalent to System.ComponentModel.BackgroundWorker.</para>
            The <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> class allows you to run an operation on a separate, dedicated thread.
            Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running.
            When you want a responsive UI and you are faced with long delays associated with such operations, the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> class provides a convenient solution.</remarks>
        </member>
        <member name="M:InTheHand.ComponentModel.BackgroundWorker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
            <summary>
            Raises the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.ProgressChanged"/> event.
            </summary>
            <param name="progressPercent">The percentage, from 0 to 100, of the background operation that is complete.</param>
            <remarks>If you need the background operation to report on its progress, you can call the <see cref="M:InTheHand.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> method to raise the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.ProgressChanged"/> event.
            The <see cref="P:InTheHand.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> property value must true, or <see cref="M:InTheHand.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> will throw an <see cref="T:System.InvalidOperationException"/>.
            <para>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</para></remarks>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:InTheHand.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> property is set to false.</exception>
        </member>
        <member name="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync">
            <summary>
            Starts execution of a background operation.
            </summary>
            <remarks>The <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/> method submits a request to start the operation running asynchronously.
            When the request is serviced, the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.DoWork"/> event is raised, which in turn starts execution of your background operation.
            <para>If the background operation is already running, calling <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/> again will raise an <see cref="T:System.InvalidOperationException"/>.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="P:InTheHand.ComponentModel.BackgroundWorker.IsBusy"/> is true.</exception>
        </member>
        <member name="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
            <summary>
            Starts execution of a background operation.
            </summary>
            <param name="argument">A parameter for use by the background operation to be executed in the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.DoWork"/> event handler.</param>
            <remarks>The <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/> method submits a request to start the operation running asynchronously.
            When the request is serviced, the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.DoWork"/> event is raised, which in turn starts execution of your background operation.
            <para>If the background operation is already running, calling <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/> again will raise an <see cref="T:System.InvalidOperationException"/>.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="P:InTheHand.ComponentModel.BackgroundWorker.IsBusy"/> is true.</exception>
        </member>
        <member name="M:InTheHand.ComponentModel.BackgroundWorker.CancelAsync">
            <summary>
            Requests cancellation of a pending background operation.
            </summary>
            <remarks><see cref="M:InTheHand.ComponentModel.BackgroundWorker.CancelAsync"/> submits a request to terminate the pending background operation and sets the <see cref="P:InTheHand.ComponentModel.BackgroundWorker.CancellationPending"/> property to true.
            <para>When you call <see cref="M:InTheHand.ComponentModel.BackgroundWorker.CancelAsync"/>, your worker method has an opportunity to stop its execution and exit.
            The worker code should periodically check the <see cref="P:InTheHand.ComponentModel.BackgroundWorker.CancellationPending"/> property to see if it has been set to true.</para></remarks>
            <exception cref="T:System.InvalidOperationException"><see cref="P:InTheHand.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"/> is false.</exception>
        </member>
        <member name="E:InTheHand.ComponentModel.BackgroundWorker.DoWork">
            <summary>
            Occurs when <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/> is called.
            </summary>
        </member>
        <member name="E:InTheHand.ComponentModel.BackgroundWorker.ProgressChanged">
            <summary>
            Occurs when <see cref="M:InTheHand.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> is called.
            </summary>
        </member>
        <member name="E:InTheHand.ComponentModel.BackgroundWorker.RunWorkerCompleted">
            <summary>
            Occurs when the background operation has completed, has been cancelled, or has raised an exception.
            </summary>
        </member>
        <member name="P:InTheHand.ComponentModel.BackgroundWorker.CancellationPending">
            <summary>
            Gets a value indicating whether the application has requested cancellation of a background operation.
            </summary>
        </member>
        <member name="P:InTheHand.ComponentModel.BackgroundWorker.IsBusy">
            <summary>
            Gets a value indicating whether the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> is running an asynchronous operation.
            </summary>
            <value>true, if the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> is running an asynchronous operation; otherwise, false.</value>
            <remarks>The <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> starts an asynchronous operation when you call <see cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/>.</remarks>
            <seealso cref="M:InTheHand.ComponentModel.BackgroundWorker.RunWorkerAsync"/>
        </member>
        <member name="P:InTheHand.ComponentModel.BackgroundWorker.WorkerReportsProgress">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> object can report progress updates.
            </summary>
            <value>true if the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> supports progress updates; otherwise false.
            The default is false.</value>
            <remarks>Set the <see cref="P:InTheHand.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> property to true if you want the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> to support progress updates.
            When this property is true, user code can call the <see cref="M:InTheHand.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> method to raise the <see cref="E:InTheHand.ComponentModel.BackgroundWorker.ProgressChanged"/> event.</remarks>
        </member>
        <member name="P:InTheHand.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> object supports asynchronous cancellation.
            </summary>
            <value>true if the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> supports cancellation; otherwise false.
            The default is false.</value>
            <remarks>Set the <see cref="P:InTheHand.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"/> property to true if you want the <see cref="T:InTheHand.ComponentModel.BackgroundWorker"/> to support cancellation.
            When this property is true, you can call the <see cref="M:InTheHand.ComponentModel.BackgroundWorker.CancelAsync"/> method to interrupt a background operation.</remarks>
        </member>
        <member name="T:InTheHand.Windows.Forms.ListViewInTheHand">
            <summary>
            Provides supporting methods for <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
            <seealso cref="T:System.Windows.Forms.ListView"/>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetDoubleBuffered(System.Windows.Forms.ListView)">
            <summary>
            Gets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <returns>true if the surface of the control should be drawn using double buffering; otherwise, false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.SetDoubleBuffered(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="value">true if the surface of the control should be drawn using double buffering; otherwise, false.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetGradient(System.Windows.Forms.ListView)">
            <summary>
            Gets a value indicating whether a gradient background is drawn for the control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.SetGradient(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Applies the gradient extended style to the <see cref="T:System.Windows.Forms.ListView"/> control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="enable">true if gradient is to be drawn behind list; otherwise, false. The default is false.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetTheme(System.Windows.Forms.ListView)">
            <summary>
            Gets a value indicating whether this control should draw using the currently selected theme.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <returns></returns>
            <remarks>
            <list type="table"><listheader><term>Requirements</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile 6.5 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.SetTheme(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets a value indicating whether this control should draw using the currently selected theme.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="enable">true if theme is to be used; otherwise, false. The default is false.</param>
            <remarks>
            <list type="table"><listheader><term>Requirements</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile 6.5 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetGridLines(System.Windows.Forms.ListView)">
            <summary>
            Gets a value indicating whether grid lines appear between the rows and columns containing the items and subitems in the control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <returns>true if grid lines are drawn around items and subitems; otherwise, false.
            The default is false.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.SetGridLines(System.Windows.Forms.ListView,System.Boolean)">
            <summary>
            Sets a value indicating whether grid lines appear between the rows and columns containing the items and subitems in the control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="enable">true if grid lines are drawn around items and subitems; otherwise, false. The default is false.</param>
            <remarks>The GridLines property has no effect unless the <see cref="P:System.Windows.Forms.ListView.View"/> property of the <see cref="T:System.Windows.Forms.ListView"/> control is set to Details.
            The GridLines property allows you to display lines to identify the rows and columns that are displayed in the <see cref="T:System.Windows.Forms.ListView"/> control when it displays items and their subitems.
            The grid lines that are displayed do not provide the ability to resize rows and columns as an application such as Microsoft Excel does.
            Only columns can be resized, if column headers are displayed, by moving the mouse pointer to the right side of the column to resize and then clicking and dragging until the column is the size you want.
            The grid lines feature is used to provide the user of the control with visible boundaries around items and subitems.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetItemRect(System.Windows.Forms.ListView,System.Int32)">
            <summary>
            Retrieves the bounding rectangle for a specific item within the list view control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> whose bounding rectangle you want to return.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents the bounding rectangle for the specified portion of the specified <see cref="T:System.Windows.Forms.ListViewItem"/>.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetItemRect(System.Windows.Forms.ListView,System.Int32,InTheHand.Windows.Forms.ItemBoundsPortion)">
            <summary>
            Retrieves the specified portion of the bounding rectangle for a specific item within the list view control.
            </summary>
            <param name="listView">The <see cref="T:System.Windows.Forms.ListView"/> control.</param>
            <param name="index">The zero-based index of the item within the <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> whose bounding rectangle you want to return.</param>
            <param name="portion">One of the <see cref="T:InTheHand.Windows.Forms.ItemBoundsPortion"/> values that represents a portion of the <see cref="T:System.Windows.Forms.ListViewItem"/> for which to retrieve the bounding rectangle.</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> that represents the bounding rectangle for the specified portion of the specified <see cref="T:System.Windows.Forms.ListViewItem"/>.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.SetBackgroundImage(System.Windows.Forms.ListView,System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Sets the background image displayed in the <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
            <param name="listView"></param>
            <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/> that represents the image to display in the background of the control.</param>
            <param name="tileLayout">Sets a value indicating whether the background image of the <see cref="T:System.Windows.Forms.ListView"/> should be tiled.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetBackgroundImage(System.Windows.Forms.ListView)">
            <summary>
            Gets or sets the background image displayed in the <see cref="T:System.Windows.Forms.ListView"/>.
            </summary>
            <param name="listView"></param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ListViewInTheHand.GetBackgroundImageTiled(System.Windows.Forms.ListView)">
            <summary>
            Gets or sets a value indicating whether the background image of the <see cref="T:System.Windows.Forms.ListView"/> should be tiled.
            </summary>
            <param name="listView"></param>
            <returns>true if the background image of the <see cref="T:System.Windows.Forms.ListView"/> should be tiled; otherwise, false.
            The default is false.</returns>
        </member>
        <member name="T:InTheHand.Windows.Forms.ItemBoundsPortion">
            <summary>
            Specifies a portion of the list view item from which to retrieve the bounding rectangle.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ItemBoundsPortion.Entire">
            <summary>
            The bounding rectangle of the entire item, including the icon, the item text, and the subitem text (if displayed), should be retrieved.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ItemBoundsPortion.Icon">
            <summary>
            The bounding rectangle of the icon or small icon should be retrieved.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ItemBoundsPortion.Label">
            <summary>
            The bounding rectangle of the item text should be retrieved.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ItemBoundsPortion.ItemOnly">
            <summary>
            The bounding rectangle of the icon or small icon and the item text should be retrieved.
            In all views except the details view of the <see cref="T:System.Windows.Forms.ListView"/>, this value specifies the same bounding rectangle as the <see cref="F:InTheHand.Windows.Forms.ItemBoundsPortion.Entire"/> value.
            In details view, this value specifies the bounding rectangle specified by the <see cref="F:InTheHand.Windows.Forms.ItemBoundsPortion.Entire"/> value without the subitems.
            If the CheckBoxes property is set to true, this property does not include the area of the check boxes in its bounding rectangle.
            To include the entire item, including the check boxes, use the <see cref="F:InTheHand.Windows.Forms.ItemBoundsPortion.Entire"/> value when calling the <see cref="M:InTheHand.Windows.Forms.ListViewInTheHand.GetItemRect(System.Windows.Forms.ListView,System.Int32)"/> method.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.BatteryChargeStatus">
            <summary>
            Defines identifiers that indicate the current battery charge level or charging state information.
            </summary>
            <remarks>This enumeration is used by the <see cref="P:InTheHand.Windows.Forms.PowerStatus.BatteryChargeStatus"/> property of the <see cref="T:InTheHand.Windows.Forms.PowerStatus"/> class.</remarks>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.High">
            <summary>
            Indicates a high level of battery charge.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.Low">
            <summary>
            Indicates a low level of battery charge.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.Critical">
            <summary>
            Indicates a critically low level of battery charge.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.Charging">
            <summary>
            Indicates a battery is charging.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.NoSystemBattery">
            <summary>
            Indicates that no battery is present.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.BatteryChargeStatus.Unknown">
            <summary>
            Indicates an unknown battery condition.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.SendKeys">
            <summary>
            Provides methods for sending keystrokes to an application.
            </summary>
            <remarks>Use SendKeys to send keystrokes and keystroke combinations to the active application.
            To send a keystroke to a class and immediately continue with the flow of your program, use <see cref="M:InTheHand.Windows.Forms.SendKeys.Send(System.String)"/>.
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile 2003 and later</description></item>
            <item><term>Windows Embedded</term><description>Windows CE 4.1 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.SendKeys.Send(System.String)">
            <summary>
            Sends keystrokes to the active application.
            </summary>
            <param name="keys">The string of keystrokes to send.</param>
            <exception cref="T:System.ArgumentException">keys does not represent valid keystrokes.</exception>
        </member>
        <member name="T:InTheHand.Windows.Forms.PowerStatus">
            <summary>
            Indicates current system power status information.
            </summary>
            <remarks>The <see cref="T:InTheHand.Windows.Forms.PowerStatus"/> class represents information about the current AC line power status, battery charging status, and battery charge status.
            <para>This class is used by the <see cref="P:InTheHand.Windows.Forms.SystemInformationInTheHand.PowerStatus"/> property of the <see cref="T:InTheHand.Windows.Forms.SystemInformationInTheHand"/> class to indicate current system power information.</para></remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.PowerStatus.PowerLineStatus">
            <summary>
            AC power status.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.PowerStatus.BatteryChargeStatus">
            <summary>
            Gets the current battery charge status.
            </summary>
        </member>
        <member name="P:InTheHand.Windows.Forms.PowerStatus.BatteryLifePercent">
            <summary>
            Gets the approximate percentage of full battery time remaining.
            </summary>
            <remarks>The approximate percentage, from 0 to 100, of full battery time remaining, or 255 if the percentage is unknown.</remarks>
        </member>
        <member name="P:InTheHand.Windows.Forms.PowerStatus.BatteryLifeRemaining">
            <summary>
            Gets the approximate number of seconds of battery time remaining.
            </summary>
            <value>The approximate number of seconds of battery life remaining, or -1 if the approximate remaining battery life is unknown.</value>
        </member>
        <member name="P:InTheHand.Windows.Forms.PowerStatus.BatteryFullLifeTime">
            <summary>
            Gets the reported full charge lifetime of the primary battery power source in seconds.
            </summary>
            <value>The reported number of seconds of battery life available when the battery is fullly charged, or -1 if the battery life is unknown.</value>
        </member>
        <member name="T:InTheHand.Windows.Forms.ControlPaint">
            <summary>
            Provides methods used to paint common Windows controls and their elements.
            </summary>
            <remarks><para>Equivalent to System.Windows.Forms.ControlPaint</para>
            The methods contained in the <see cref="T:InTheHand.Windows.Forms.ControlPaint"/> class enable you to draw your own controls or elements of controls.
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Pocket PC 2003 and later, Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows CE 4.1 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.Dark(System.Drawing.Color)">
            <summary>
            Creates a new dark color object for the control from the specified color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to be darkened.</param>
            <returns>A Color that represents the dark color on the control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DarkDark(System.Drawing.Color)">
            <summary>
            Creates a new dark color object for the control from the specified color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to be darkened.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> that represents the dark color on the control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.Dark(System.Drawing.Color,System.Single)">
            <summary>
            Creates a new dark color object for the control from the specified color and darkens it by the specified percentage.
            </summary>
            <param name="c">The <see cref="T:System.Drawing.Color"/> to be darkened.</param>
            <param name="percDarker">The percentage to darken the specified <see cref="T:System.Drawing.Color"/>.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> that represent the dark color on the control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.Light(System.Drawing.Color)">
            <summary>
            Creates a new light color object for the control from the specified color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to be lightened.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> that represents the light color on the control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.LightLight(System.Drawing.Color)">
            <summary>
            Creates a new light color object for the control from the specified color.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to be lightened.</param>
            <returns>A <see cref="T:System.Drawing.Color"/> that represents the light color on the control.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.Light(System.Drawing.Color,System.Single)">
            <summary>
            Creates a new light color object for the control from the specified color and lightens it by the specified percentage.
            </summary>
            <param name="baseColor">The <see cref="T:System.Drawing.Color"/> to be lightened.</param>
            <param name="percLighter">The percentage to lighten the specified <see cref="T:System.Drawing.Color"/>.</param>
            <returns>Creates a new light color object for the control from the specified color and lightens it by the specified percentage.</returns>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a focus rectangle on the specified graphics surface and within the specified bounds.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the grab handle glyph.</param>
            <remarks>A focus rectangle is a dotted rectangle that Windows uses to indicate what control has the current keyboard focus.
            On Windows Mobile this is drawn in the color specified by the current device theme.</remarks>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawCaptionButton(System.Drawing.Graphics,System.Drawing.Rectangle,InTheHand.Windows.Forms.CaptionButton,InTheHand.Windows.Forms.ButtonState)">
            <summary>
            Draws a caption button control.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the caption button.</param>
            <param name="button">One of the <see cref="T:InTheHand.Windows.Forms.CaptionButton"/> values that specifies the type of caption button to draw.</param>
            <param name="state">A bitwise combination of the <see cref="T:InTheHand.Windows.Forms.ButtonState"/> values that specifies the state to draw the button in.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,InTheHand.Windows.Forms.ButtonState)">
            <summary>
            Draws a check box control.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the check box.</param>
            <param name="state">A bitwise combination of the <see cref="T:InTheHand.Windows.Forms.ButtonState"/> values that specifies the state to draw the check box in.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,InTheHand.Windows.Forms.ButtonState)">
            <summary>
            Draws a button control in the specified state, on the specified graphics surface, and within the specified bounds.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The Rectangle that represents the dimensions of the button.</param>
            <param name="state">A bitwise combination of the <see cref="T:InTheHand.Windows.Forms.ButtonState"/> values that specifies the state to draw the button in.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Rectangle,InTheHand.Windows.Forms.ButtonState)">
            <summary>
            Draws a radio button control.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the radio button.</param>
            <param name="state">A bitwise combination of the <see cref="T:InTheHand.Windows.Forms.ButtonState"/> values that specifies the state to draw the radio button in.</param>
        </member>
        <member name="M:InTheHand.Windows.Forms.ControlPaint.DrawScrollButton(System.Drawing.Graphics,System.Drawing.Rectangle,InTheHand.Windows.Forms.ScrollButton,InTheHand.Windows.Forms.ButtonState)">
            <summary>
            Draws a scroll button on a scroll bar control.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> to draw on.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> that represents the dimensions of the glyph.</param>
            <param name="button">One of the <see cref="T:InTheHand.Windows.Forms.ScrollButton"/> values that specifies the type of scroll arrow to draw.</param>
            <param name="state">A bitwise combination of the <see cref="T:InTheHand.Windows.Forms.ButtonState"/> values that specifies the state to draw the scroll button in.</param>
        </member>
        <member name="T:InTheHand.Windows.Forms.CaptionButton">
            <summary>
            Specifies the type of caption button to display.
            </summary>
            <remarks>Equivalent to System.Windows.Forms.CaptionButton</remarks>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Close">
            <summary>
            A Close button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Minimize">
            <summary>
            A Minimize button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Maximize">
            <summary>
            A Maximize button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Restore">
            <summary>
            A Restore button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Help">
            <summary>
            A Help button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.CaptionButton.Ok">
            <summary>
            An Ok button.
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.ButtonState">
            <summary>
            Specifies the appearance of a button.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ButtonState.Normal">
            <summary>
            The button has its normal appearance (three-dimensional).
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ButtonState.Inactive">
            <summary>
            The button is inactive (grayed).
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ButtonState.Pushed">
            <summary>
            The button appears pressed.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ButtonState.Checked">
            <summary>
            The button has a checked or latched appearance.
            Use this appearance to show that a toggle button has been pressed. 
            </summary>
        </member>
        <member name="T:InTheHand.Windows.Forms.ScrollButton">
            <summary>
            Specifies the type of scroll arrow to draw on a scroll bar.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ScrollButton.Up">
            <summary>
            An up-scroll arrow.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ScrollButton.Down">
            <summary>
            A down-scroll arrow.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ScrollButton.Left">
            <summary>
            A left-scroll arrow.
            </summary>
        </member>
        <member name="F:InTheHand.Windows.Forms.ScrollButton.Right">
            <summary>
            A right-scroll arrow.
            </summary>
        </member>
    </members>
</doc>
