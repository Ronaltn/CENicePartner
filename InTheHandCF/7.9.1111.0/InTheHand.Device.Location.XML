<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InTheHand.Device.Location</name>
    </assembly>
    <members>
        <member name="T:InTheHand.Device.Location.GeoCoordinate">
            <summary>
            Represents a geographical location determined by latitude and longitude coordinates.
            May also include altitude, accuracy, speed and course information.
            </summary>
            <remarks><para>Equivalent to System.Device.Location.GeoCoordinate in the .NET Framework 4</para></remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> with no data fields set.
            </summary>
            <remarks>All data fields will be set to <see cref="F:System.Double.NaN"/>.
            The new instance of <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> is equivalent to <see cref="F:InTheHand.Device.Location.GeoCoordinate.Unknown"/>.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> class from latitude and longitude data.
            </summary>
            <param name="latitude">The latitude of the location.
            May range from -90.0 to 90.0.</param>
            <param name="longitude">The longitude of the location.
            May range from -180.0 to 180.0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">latitude or longitude is out of range.</exception>
            <remarks>The latitude and longitude given must correspond to an actual location on the globe.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> class from latitude, longitude and altitude data.
            </summary>
            <param name="latitude">The latitude of the location.
            May range from -90.0 to 90.0.</param>
            <param name="longitude">The longitude of the location.
            May range from -180.0 to 180.0.</param>
            <param name="altitude">The altitude in meters.
            May be negative, 0, positive, or NaN, if unknown.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">latitude, longitude or altitude is out of range.</exception>
            <remarks>The latitude and longitude given must correspond to an actual location on the globe.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> class from latitude, longitude, altitude, horizontal accuracy, vertical accuracy, speed and course.
            </summary>
            <param name="latitude">The latitude of the location.
            May range from -90.0 to 90.0.</param>
            <param name="longitude">The longitude of the location.
            May range from -180.0 to 180.0.</param>
            <param name="altitude">The altitude in meters.
            May be negative, 0, positive, or <see cref="F:System.Double.NaN"/>, if unknown.</param>
            <param name="horizontalAccuracy">The accuracy of the latitude/longitude coordinates, in meters.
            Must be greater than or equal to 0.
            If a value of 0 is supplied to this constructor, the <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/> property will be set to <see cref="F:System.Double.NaN"/>.</param>
            <param name="verticalAccuracy">The accuracy of the altitude, in meters.
            Must be greater than or equal to 0.
            If a value of 0 is supplied to this constructor, the <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> property will be set to <see cref="F:System.Double.NaN"/>.</param>
            <param name="speed">The speed measured in meters per second.
            May be negative, 0, positive, or <see cref="F:System.Double.NaN"/>, if unknown.
            A negative speed can indicate moving in reverse.</param>
            <param name="course">The direction of travel, rather than orientation.
            This parameter is measured in degrees relative to true north. 
            Must range from 0 to 360.0, or be <see cref="F:System.Double.NaN"/>. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">latitude, longitude, horizontalAccuracy, verticalAccuracy or course is out of range.</exception>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.Equals(System.Object)">
            <summary>
            Determines if a specified GeoCoordinate is equal to the current GeoCoordinate, based solely on latitude and longitude.
            </summary>
            <param name="obj">The object to compare the GeoCoordinate to.</param>
            <returns>true, if the GeoCoordinate objects are equal; otherwise, false.</returns>
            <remarks>Equivalent GeoCoordinate objects have the same <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> properties.
            The <see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/>, <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/>, and <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> properties are not used in determining equivalency.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.Equals(InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Determines if the GeoCoordinate object is equivalent to the parameter, based solely on latitude and longitude.
            </summary>
            <param name="other">The GeoCoordinate object to compare to the calling object.</param>
            <returns>true if the GeoCoordinate objects are equal; otherwise, false.</returns>
            <remarks>Equivalent GeoCoordinate objects have the same <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> properties.
            The <see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/>, <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/>, and <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> properties are not used in determining equivalency.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.GetHashCode">
            <summary>
            Serves as a hash function for the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>.</returns>
            <remarks>GeoCoordinate objects that are equivalent have the same hash code.
            Equivalent <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects have the same <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> properties.
            The <see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/>, <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/>, and <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> properties are not used in determining equivalency.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.ToString">
            <summary>
            Returns a string containing the latitude and longitude.
            </summary>
            <returns>A string containing the latitude and longitude, separated by a comma.</returns>
            <remarks>The string representation given by this method is intended only for debugging use.
            This method will not return any locale-specific formatting for latitude and longitude.</remarks>
        </member>
        <member name="F:InTheHand.Device.Location.GeoCoordinate.Unknown">
            <summary>
            Represents a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> object with unknown <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> fields.
            </summary>
            <remarks>The <see cref="P:InTheHand.Device.Location.GeoCoordinate.IsUnknown"/> property can be used to check whether a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> contains no data.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.GetDistanceTo(InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Returns the distance between the latitude/longitude coordinate specified by this <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> and another specified <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>.
            </summary>
            <param name="other">The <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> for the location to calculate the distance to.</param>
            <returns>The distance between the two coordinates, in meters.</returns>
            <remarks>The Haversine formula is used to calculate the distance.
            The Haversine formula accounts for the curvature of the earth, but assumes a spherical earth rather than an ellipsoid.
            For long distances, the Haversine formula introduces an error of less than 0.1 percent.
            <para><see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/> is not used to calculate the distance.</para></remarks>
            <exception cref="T:System.ArgumentException">Latitude or longitude is not a number (NaN).</exception>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.op_Equality(InTheHand.Device.Location.GeoCoordinate,InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Determines whether two <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects refer to the same location.
            </summary>
            <param name="left">The first <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to compare.</param>
            <param name="right">The second <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to compare.</param>
            <returns>true, if the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects are determined to be equivalent; otherwise, false.</returns>
            <remarks>Equivalent <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects have the same <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> properties.
            The <see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/>, <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/>, and <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> properties are not used in determining equivalency.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinate.op_Inequality(InTheHand.Device.Location.GeoCoordinate,InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Determines whether two <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects correspond to different locations.
            </summary>
            <param name="left">The first <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to compare.</param>
            <param name="right">The second <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to compare.</param>
            <returns>true, if the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects are determined to be different; otherwise, false.</returns>
            <remarks>Equivalent <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> objects have the same <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> and <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> properties.
            The <see cref="P:InTheHand.Device.Location.GeoCoordinate.Altitude"/>, <see cref="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy"/>, and <see cref="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy"/> properties are not used in determining equivalency.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.Latitude">
            <summary>
            Gets or sets the latitude of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>.
            </summary>
            <value>Latitude of the location.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> is set outside the valid range.</exception>
            <remarks>Latitude may range from -90.0 to 90.0.
            <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> is measured in degrees north or south from the equator.
            Positive values are north of the equator and negative values are south of the equator.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.Longitude">
            <summary>
            Gets or sets the longitude of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>.
            </summary>
            <value>Longitude of the location.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Longitude is set outside the valid range.</exception>
            <remarks>The longitude may range from -180.0 to 180.0.
            Longitude is measured in degrees east or west of the prime meridian.
            Negative values are west of the prime meridian, and positive values are east of the prime meridian.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.Altitude">
            <summary>
            Gets the altitude of the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>, in meters.
            </summary>
            <value>The altitude, in meters.</value>
            <remarks>The altitude is given relative to sea level.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.HorizontalAccuracy">
            <summary>
            Gets or sets the accuracy of the latitude and longitude given by the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>, in meters.
            </summary>
            <value>The accuracy of the latitude and longitude, in meters.</value>
            <remarks>The accuracy can be considered the radius of certainty of the latitude/longitude data.
            A circular area that is formed with the accuracy as the radius and the latitude/longitude coordinates as the center contains the actual location.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument must be non-negative.</exception>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.VerticalAccuracy">
            <summary>
            Gets or sets the accuracy of the altitude given by the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/>, in meters.
            </summary>
            <value>The accuracy of the altitude, in meters.</value>
            <remarks>The horizontal accuracy value must be nonnegative.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument must be non-negative.</exception>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.Course">
            <summary>
            Gets or sets the heading in degrees relative to true north.
            </summary>
            <value>The heading in degrees relative to true north.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument must be in the range 0.0 to 360.0.</exception>
            <remarks>The course value must be between 0.0 and 360.0, and <see cref="F:System.Double.NaN"/> if the heading is not defined.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.Speed">
            <summary>
            Gets or sets the speed in meters per second.
            </summary>
            <value>The speed in meters per second.
            The speed must be greater than or equal to zero, or <see cref="F:System.Double.NaN"/>.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The argument must be non-negative.</exception>
            <example>
            The following example prints the Course and Speed properties of the current location's GeoCoordinate.
            <code lang="cs">
            static void GetLocationCourseAndSpeed()
            {
                GeoCoordinateWatcher watcher = new GeoCoordinateWatcher();
                watcher.Start();
                System.Threading.Thread.Sleep(1000);
                if (watcher.Position.Location.IsUnknown != true)
                {
                    GeoCoordinate coord = watcher.Position.Location;
                    Debug.WriteLine("Course: {0}, Speed: {1}", coord.Course, coord.Speed);
                }
                else
                {
                    Debug.WriteLine("Unknown");
                }
            }
            </code></example>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinate.IsUnknown">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> does not contain <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> or <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> data.
            </summary>
            <value>true if the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> does not contain <see cref="P:InTheHand.Device.Location.GeoCoordinate.Latitude"/> or <see cref="P:InTheHand.Device.Location.GeoCoordinate.Longitude"/> data; otherwise, false.</value>
        </member>
        <member name="T:InTheHand.Device.Location.GeoPositionStatus">
            <summary>
            Indicates the ability of the location provider to provide location updates.
            </summary>
        </member>
        <member name="F:InTheHand.Device.Location.GeoPositionStatus.Ready">
            <summary>
            A location provider is ready to supply new data.
            </summary>
        </member>
        <member name="F:InTheHand.Device.Location.GeoPositionStatus.Initializing">
            <summary>
            The location provider is initializing.
            For example, a GPS still obtaining a fix has this status.
            </summary>
        </member>
        <member name="F:InTheHand.Device.Location.GeoPositionStatus.NoData">
            <summary>
            There are no devices than can currently resolve location. 
            If the conditions for Disabled do not apply, <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> has this status before it has been started and after it has been stopped.
            </summary>
        </member>
        <member name="F:InTheHand.Device.Location.GeoPositionStatus.Disabled">
            <summary>
            The location system feature has been disabled.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.GeoCoordinateWatcher">
            <summary>
            Supplies location data that is based on latitude and longitude coordinates. 
            </summary>
            <remarks>
            <para>Equivalent to System.Device.Location.GeoCoordinateWatcher in the .NET Framework 4</para>
            The GeoCoordinateWatcher class supplies coordinate-based location data from the current location provider, which is the location provider that is currently prioritized the highest on the computer, based on a number of factors such as the age and accuracy of the data from all providers, the accuracy requested by location applications, and the power consumption and performance impact associated with the location provider.
            Currently only a GPS provider is supported on .NET Compact Framework platforms.
            <para>To begin accessing location data, create a <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> and call <see cref="M:InTheHand.Device.Location.GeoCoordinateWatcher.Start"/> or <see cref="M:InTheHand.Device.Location.GeoCoordinateWatcher.TryStart(System.Boolean,System.TimeSpan)"/> to initiate the acquisition of data from the current location provider.</para>
            <para>The <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Status"/> property can be checked to determine if data is available.
            If data is available, you can get the location once from the <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position"/> property, or receive continuous location updates by handling the <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> event.</para>
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 5.0 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows Embedded Compact 6.0 and later</description></item>
            </list>
            </remarks>
            <example>The following program demonstrates how to create a <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> and start acquiring data using an initialization timeout.
            It prints the location's coordinates, if known.
            <code lang="cs">
            using System;
            using System.Device.Location;
            
            namespace GetLocationProperty
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        GetLocationProperty();
                    }
                    
                    static void GetLocationProperty()
                    {
                        GeoCoordinateWatcher watcher = new GeoCoordinateWatcher();
                    
                        // Do not suppress prompt, and wait 1000 milliseconds to start.
                        watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));
                    
                        GeoCoordinate coord = watcher.Position.Location;
                    
                        if (coord.IsUnknown != true)
                        {
                            Debug.WriteLine("Lat: {0}, Long: {1}", coord.Latitude, coord.Longitude);
                        }
                        else
                        {
                            Debug.WriteLine("Unknown latitude and longitude.");
                        }
                    }
                }
            }
            </code></example> 
            <example>The following program demonstrates how to receive continuous location updates by subscribing to PositionChanged events.
            <code lang="cs">
            using System;
            using System.Device.Location;
            
            namespace GetLocationEvent
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        CLocation myLocation = new CLocation();
                        myLocation.GetLocationEvent();
                        Console.WriteLine("Enter any key to quit.");
                        Console.ReadLine();            
                    }
                    class CLocation
                    {
                        GeoCoordinateWatcher watcher;
            
                        public void GetLocationEvent()
                        {
                            this.watcher = new GeoCoordinateWatcher();
                            this.watcher.PositionChanged += new EventHandler&lt;GeoPositionChangedEventArgs&lt;GeoCoordinate&gt;&gt;(watcher_PositionChanged);
                            bool started = this.watcher.TryStart(false, TimeSpan.FromMilliseconds(2000));
                            if (!started)
                            {
                                Debug.WriteLine("GeoCoordinateWatcher timed out on start.");
                            }
                        }
            
                        void watcher_PositionChanged(object sender, GeoPositionChangedEventArgs&lt;GeoCoordinate&gt; e)
                        {
                            PrintPosition(e.Position.Location.Latitude, e.Position.Location.Longitude);
                        }
            
                        void PrintPosition(double Latitude, double Longitude)
                        {
                            Debug.WriteLine("Latitude: {0}, Longitude {1}", Latitude, Longitude);
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:InTheHand.Device.Location.IGeoPositionWatcher`1">
            <summary>
            Interface that can be implemented for providing accessing location data and receiving location updates.
            </summary>
            <typeparam name="T">The type of the object that contains the location data.</typeparam>
            <remarks><para>Equivalent to System.Device.Location.IGeoPositionWatcher&lt;T&gt; in the .NET Framework 4</para>
            The <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> class implements <see cref="T:InTheHand.Device.Location.IGeoPositionWatcher`1"/>, using <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> as the type parameter.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoPositionWatcher`1.Start">
            <summary>
            Initiate the acquisition of location data.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoPositionWatcher`1.Start(System.Boolean)">
            <summary>
            Start acquiring location data, specifying whether or not to suppress prompting for permissions.
            This method returns synchronously.
            </summary>
            <param name="suppressPermissionPrompt">If true, do not prompt the user to enable location providers and only start if location data is already enabled. 
            If false, a dialog box may be displayed to prompt the user to enable location sensors that are disabled.</param>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoPositionWatcher`1.Stop">
            <summary>
            Stop acquiring location data.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoPositionWatcher`1.TryStart(System.Boolean,System.TimeSpan)">
            <summary>
            Start acquiring location data, specifying an initialization timeout.
            This method returns synchronously.
            </summary>
            <param name="suppressPermissionPrompt">If true, do not prompt the user to enable location providers and only start if location data is already enabled. 
            If false, a dialog box may be displayed to prompt the user to enable location sensors that are disabled.</param>
            <param name="timeout">Time in milliseconds to wait for initialization to complete.</param>
            <returns>true if succeeded, false if timed out.</returns>
        </member>
        <member name="P:InTheHand.Device.Location.IGeoPositionWatcher`1.Position">
            <summary>
            Gets the location data.
            </summary>
            <value>The <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> containing the location data.</value>
        </member>
        <member name="P:InTheHand.Device.Location.IGeoPositionWatcher`1.Status">
            <summary>
            Gets the status of location data.
            </summary>
            <value>The status of location data.</value>
        </member>
        <member name="E:InTheHand.Device.Location.IGeoPositionWatcher`1.PositionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:InTheHand.Device.Location.IGeoPositionWatcher`1.StatusChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/>.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.TryStart(System.Boolean,System.TimeSpan)">
            <summary>
            Initiates the acquisition of data from the current location provider. This method returns synchronously.
            </summary>
            <param name="suppressPermissionPrompt">Not used.</param>
            <param name="timeout">Time in milliseconds to wait for the location provider to start before timing out.</param>
            <returns>true if data acquisition is started within the time period specified by timeout; otherwise, false.</returns>
            <remarks>This method blocks during the time period specified by timeout.
            Use caution when calling TryStart from the user interface thread of your application.</remarks>
            <example>The following example demonstrates how to call TryStart.
            <code lang="cs">
            using System;
            using System.Device.Location;
            
            namespace GetLocationProperty
            {
                class Program
                {
                    static void Main(string[] args)
                    {
                        GetLocationProperty();
                    }
                    
                    static void GetLocationProperty()
                    {
                        GeoCoordinateWatcher watcher = new GeoCoordinateWatcher();
                    
                        // Do not suppress prompt, and wait 1000 milliseconds to start.
                        watcher.TryStart(false, TimeSpan.FromMilliseconds(1000));
                    
                        GeoCoordinate coord = watcher.Position.Location;
                    
                        if (coord.IsUnknown != true)
                        {
                            Debug.WriteLine("Lat: {0}, Long: {1}", coord.Latitude, coord.Longitude);
                        }
                        else
                        {
                            Debug.WriteLine("Unknown latitude and longitude.");
                        }
                    }
                }
            }
            </code></example>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.Start">
            <summary>
            Initiate the acquisition of data from the current location provider.
            This method enables <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> events and allows access to the <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position"/> property.
            </summary>
            <remarks>Calling this method will initiate the acquisition of data from the current location provider.
            Currently only a GPS location provider is supported on .NET Compact Framework platforms.
            If the current prioritized location provider does not have data when the Start method is called, it will start to acquire data.
            Once data is available, data can be accessed synchronously, and will be delivered asynchronously if events are being handled.
            <para>If the GPS Intermediate Driver is not present, <see cref="M:InTheHand.Device.Location.GeoCoordinateWatcher.Start"/> will immediately return, <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> events will not be raised, and the location returned by the <see cref="N:InTheHand.Device.Location"/> property of <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position"/> will contain <see cref="F:InTheHand.Device.Location.GeoCoordinate.Unknown"/>.</para></remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.Start(System.Boolean)">
            <summary>
            Initiate the acquisition of data from the current location provider.
            This method enables <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> events and allows access to the <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position"/> property.
            </summary>
            <param name="suppressPermissionPrompt">Not used.</param>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.Stop">
            <summary>
            Stops the <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> from providing location data and events.
            </summary>
            <remarks>After <see cref="M:InTheHand.Device.Location.GeoCoordinateWatcher.Stop"/> is called, no further <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> events occur, and the <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position"/> property will return <see cref="F:InTheHand.Device.Location.GeoCoordinate.Unknown"/>.
            When <see cref="M:InTheHand.Device.Location.GeoCoordinateWatcher.Stop"/> is called, the <see cref="P:InTheHand.Device.Location.GeoCoordinateWatcher.Status"/> property is set to <see cref="F:InTheHand.Device.Location.GeoPositionStatus.Disabled"/>.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.Finalize">
            <summary>
            Free resources and perform other cleanup operations before the <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.GeoCoordinateWatcher.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the current instance of the <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/> class.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinateWatcher.Status">
            <summary>
            Gets the current status of the <see cref="T:InTheHand.Device.Location.GeoCoordinateWatcher"/>.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinateWatcher.MovementThreshold">
            <summary>
            The distance that must be moved, in meters relative to the coordinate from the last <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> event, before the location provider will raise another <see cref="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged"/> event.
            </summary>
            <value>Distance in meters.</value>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinateWatcher.ReportInterval">
            <summary>
            The requested minimum time interval between location updates, in milliseconds.
            If your application requires updates infrequently, set this value so that the location provider can conserve power by calculating location only when needed.
            </summary>
            <value>The requested minimum time interval between location updates.</value>
            <remarks>If another application has requested more frequent updates, by specifying a smaller value for ReportInterval, your application may receive updates at a higher frequency than requested.
            <list type="table"><listheader><term>Platforms Supported</term><description></description></listheader>
            <item><term>Windows Mobile</term><description>Windows Mobile Version 6.1 and later</description></item>
            <item><term>Windows Embedded Compact</term><description>Windows Embedded Compact 7 and later</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:InTheHand.Device.Location.GeoCoordinateWatcher.Position">
            <summary>
            Gets the GeoCoordinate that indicates the current location.
            </summary>
            <value>The GeoCoordinate that indicates the current location.</value>
        </member>
        <member name="E:InTheHand.Device.Location.GeoCoordinateWatcher.PositionChanged">
            <summary>
            Indicates that the latitude or longitude of the location data has changed.
            </summary>
        </member>
        <member name="E:InTheHand.Device.Location.GeoCoordinateWatcher.StatusChanged">
            <summary>
            Indicates that the status of the GeoCoordinateWatcher object has changed.
            </summary>
        </member>
        <member name="E:InTheHand.Device.Location.GeoCoordinateWatcher.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.GeoPositionStatusChangedEventArgs">
            <summary>
            Contains data for a <see cref="E:InTheHand.Device.Location.IGeoPositionWatcher`1.StatusChanged"/> event.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.GeoPositionStatusChangedEventArgs.#ctor(InTheHand.Device.Location.GeoPositionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoPositionStatusChangedEventArgs"/> class.
            </summary>
            <param name="status">The new status.</param>
        </member>
        <member name="P:InTheHand.Device.Location.GeoPositionStatusChangedEventArgs.Status">
            <summary>
            Gets the updated status.
            </summary>
            <value>The updated status.</value>
        </member>
        <member name="T:InTheHand.Device.Location.GeoPositionChangedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:InTheHand.Device.Location.IGeoPositionWatcher`1.PositionChanged"/> event.
            </summary>
            <typeparam name="T">The type of the location data in the Location property of this event's <see cref="P:InTheHand.Device.Location.GeoPositionChangedEventArgs`1.Position"/> property</typeparam>
        </member>
        <member name="M:InTheHand.Device.Location.GeoPositionChangedEventArgs`1.#ctor(InTheHand.Device.Location.GeoPosition{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoPositionChangedEventArgs`1"/> class
            </summary>
            <param name="position">The updated position.</param>
        </member>
        <member name="P:InTheHand.Device.Location.GeoPositionChangedEventArgs`1.Position">
            <summary>
            Gets the location data associated with the event.
            </summary>
            <value>A <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> object that contains the location data in its <see cref="P:InTheHand.Device.Location.GeoPosition`1.Location"/> property.</value>
        </member>
        <member name="T:InTheHand.Device.Location.ICivicAddressResolver">
            <summary>
            Provides a method that when implemented, resolves a latitude/longitude location to a civic address. 
            </summary>
            <remarks><para>Equivalent to System.Device.Location.ICivicAddressResolver in the .NET Framework 4</para>
            To resolve a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to a <see cref="T:InTheHand.Device.Location.CivicAddress"/> asynchronously, implement <see cref="M:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressAsync(InTheHand.Device.Location.GeoCoordinate)"/>, and provide the civic address data to the <see cref="E:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressCompleted"/> event.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddress(InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Resolves a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> to a civic address synchronously.
            </summary>
            <param name="coordinate">The latitude/longitude location to resolve to an address.</param>
            <returns></returns>
        </member>
        <member name="M:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressAsync(InTheHand.Device.Location.GeoCoordinate)">
            <summary>
            Initiates a request to resolve a latitude/longitude location to an address.
            </summary>
            <param name="coordinate">The latitude/longitude location to resolve to an address.</param>
        </member>
        <member name="E:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressCompleted">
            <summary>
            Occurs when an asynchronous request using <see cref="M:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressAsync(InTheHand.Device.Location.GeoCoordinate)"/> to resolve a latitude/longitude to a civic address is complete.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.ResolveAddressCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressCompleted"/> event.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.ResolveAddressCompletedEventArgs.#ctor(InTheHand.Device.Location.CivicAddress,System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="address">The <see cref="T:InTheHand.Device.Location.CivicAddress"/> containing the address resolved from the latitude/longitude location, if successful.</param>
            <param name="error">The exception object for any exception that may have occurred during the attempt to resolve the address.</param>
            <param name="cancelled">true if the operation was cancelled; otherwise, false.</param>
            <param name="userState">A token for tracking the request to resolve the address. 
            May be null if not used.</param>
            <remarks>This constructor is public so that classes implementing the <see cref="T:InTheHand.Device.Location.ICivicAddressResolver"/> interface can create this object to fire events.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.ResolveAddressCompletedEventArgs.Address">
            <summary>
            Gets the <see cref="T:InTheHand.Device.Location.CivicAddress"/> associated with the <see cref="E:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddressCompleted"/> event.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_LatitudeOrLongitudeIsNotANumber">
             <summary>
               Looks up a localized string similar to The coordinate&apos;s latitude or longitude is not a number.
            .
             </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_MustBeInRangeNegative180To180">
            <summary>
              Looks up a localized string similar to The value of the parameter must be from -180.0 to 180.0..
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_MustBeInRangeNegative90to90">
            <summary>
              Looks up a localized string similar to The value of the parameter must be from -90.0 to 90.0..
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_MustBeInRangeZeroTo360">
            <summary>
              Looks up a localized string similar to The value of the parameter must be from 0.0 to 360.0..
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_MustBeNonNegative">
            <summary>
              Looks up a localized string similar to The value of the parameter must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Argument_RequiresAtLeastOneNonEmptyStringParameter">
            <summary>
              Looks up a localized string similar to At least one address field is required..
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.Properties.Resources.Unknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.GeoPosition`1">
            <summary>
            Contains location data of a type specified by the type parameter of the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> class.
            </summary>
            <typeparam name="T">The type of the location data.</typeparam>
            <remarks><para>Equivalent to System.Device.Location.GeoPosition&lt;T&gt; in the .NET Framework 4</para></remarks>
        </member>
        <member name="M:InTheHand.Device.Location.GeoPosition`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> class.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.GeoPosition`1.#ctor(InTheHand.DateTimeOffset,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> class with a timestamp and position.
            </summary>
            <param name="timestamp">The time the location data was obtained.</param>
            <param name="position">The location data to use to initialize the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> object.</param>
        </member>
        <member name="P:InTheHand.Device.Location.GeoPosition`1.Location">
            <summary>
            Gets or sets the location data for the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> object.
            </summary>
            <value>An object of type T that contains the location data for the <see cref="T:InTheHand.Device.Location.GeoPosition`1"/> object.</value>
        </member>
        <member name="P:InTheHand.Device.Location.GeoPosition`1.Timestamp">
            <summary>
            Gets or sets the time when the location data was obtained.
            </summary>
            <value>Gets or sets the time when the location data was obtained.</value>
        </member>
        <member name="T:InTheHand.Device.Location.CivicAddress">
            <summary>
            Represents a civic address.
            A civic address can include fields such as street address, postal code, state/province, and country or region.
            </summary>
            <remarks><para>Equivalent to System.Device.Location.CivicAddress in the .NET Framework 4</para>
            A civic address for a location can be obtained from a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> by using a class that implements <see cref="T:InTheHand.Device.Location.ICivicAddressResolver"/>. 
            <para><see cref="M:InTheHand.Device.Location.ICivicAddressResolver.ResolveAddress(InTheHand.Device.Location.GeoCoordinate)"/> returns a <see cref="T:InTheHand.Device.Location.CivicAddress"/> for the current location.
            If the location source is unable to resolve the coordinate position to a civic address, <see cref="F:InTheHand.Device.Location.CivicAddress.Unknown"/> is returned.</para></remarks>
        </member>
        <member name="F:InTheHand.Device.Location.CivicAddress.Unknown">
            <summary>
            Represents a <see cref="T:InTheHand.Device.Location.CivicAddress"/> that contains no data.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.CivicAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.CivicAddress"/> class.
            </summary>
            <remarks>All fields are initialized to <see cref="F:System.String.Empty"/>.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.CivicAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:InTheHand.Device.Location.CivicAddress"/> class with address information.
            </summary>
            <param name="addressLine1">A <see cref="T:System.String"/> containing the first line of the street address.</param>
            <param name="addressLine2">A <see cref="T:System.String"/> containing the second line of the street address.</param>
            <param name="building">A <see cref="T:System.String"/> containing the building name or number.</param>
            <param name="city">A <see cref="T:System.String"/> containing the city.</param>
            <param name="countryRegion">A <see cref="T:System.String"/> containing the country or region. =</param>
            <param name="floorLevel">A <see cref="T:System.String"/> containing the floor number.</param>
            <param name="postalCode">A <see cref="T:System.String"/> containing the postal code.</param>
            <param name="stateProvince">A <see cref="T:System.String"/> containing the state or province.</param>
            <exception cref="T:System.ArgumentException">At least one parameter must be a non-empty string.</exception>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.AddressLine1">
            <summary>
            Gets or sets the first line of the address.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.AddressLine2">
            <summary>
            Gets or sets the second line of the address.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.Building">
            <summary>
            Gets or sets the building name or number.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.City">
            <summary>
            Gets or sets the name of the city.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.CountryRegion">
            <summary>
            Gets or sets the country/region of the location.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.FloorLevel">
            <summary>
            Gets or sets the floor level of the location.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.IsUnknown">
            <summary>
            Gets a value that indicates whether the <see cref="T:InTheHand.Device.Location.CivicAddress"/> contains data.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.PostalCode">
            <summary>
            Gets or sets the postal code of the location.
            </summary>
        </member>
        <member name="P:InTheHand.Device.Location.CivicAddress.StateProvince">
            <summary>
            Gets or sets the state or province of the location.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.IGeoCoordinateResolver">
            <summary>
            Provides a method that when implemented, resolves a civic address to a latitude/longitude location. 
            </summary>
            <remarks>
            To resolve a <see cref="T:InTheHand.Device.Location.CivicAddress"/> to a <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> asynchronously, implement <see cref="M:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateAsync(InTheHand.Device.Location.CivicAddress)"/>, and provide the co-ordinate data to the <see cref="E:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateCompleted"/> event.</remarks>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinate(InTheHand.Device.Location.CivicAddress)">
            <summary>
            Resolves a <see cref="T:InTheHand.Device.Location.CivicAddress"/> to a co-ordinate location synchronously.
            </summary>
            <param name="address">The address (or partial address) to resolve to a latitude/longitude location.</param>
            <returns>The <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> which matches the supplied address.</returns>
        </member>
        <member name="M:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateAsync(InTheHand.Device.Location.CivicAddress)">
            <summary>
            Initiates a request to resolve an address to a latitude/longitude location .
            </summary>
            <param name="address">The address (or partial address) to resolve to a latitude/longitude location.</param>
        </member>
        <member name="E:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateCompleted">
            <summary>
            Occurs when an asynchronous request using <see cref="M:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateAsync(InTheHand.Device.Location.CivicAddress)"/> to resolve a civic address to a latitude/longitude is complete.
            </summary>
        </member>
        <member name="T:InTheHand.Device.Location.ResolveCoordinateCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateCompleted"/> event.
            </summary>
        </member>
        <member name="M:InTheHand.Device.Location.ResolveCoordinateCompletedEventArgs.#ctor(InTheHand.Device.Location.GeoCoordinate,System.Exception,System.Boolean,System.Object)">
            <summary>
            
            </summary>
            <param name="coordinates">The <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> containing the latitude/longitude resolved from the address, if successful.</param>
            <param name="error">The exception object for any exception that may have occurred during the attempt to resolve the location.</param>
            <param name="cancelled">true if the operation was cancelled; otherwise, false.</param>
            <param name="userState">A token for tracking the request to resolve the address. 
            May be null if not used.</param>
            <remarks>This constructor is public so that classes implementing the <see cref="T:InTheHand.Device.Location.ICivicAddressResolver"/> interface can create this object to fire events.</remarks>
        </member>
        <member name="P:InTheHand.Device.Location.ResolveCoordinateCompletedEventArgs.Coordinates">
            <summary>
            Gets the <see cref="T:InTheHand.Device.Location.GeoCoordinate"/> associated with the <see cref="E:InTheHand.Device.Location.IGeoCoordinateResolver.ResolveCoordinateCompleted"/> event.
            </summary>
        </member>
    </members>
</doc>
